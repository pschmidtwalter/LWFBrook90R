% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mrunLWFB90.R
\name{mrunLWFB90}
\alias{mrunLWFB90}
\title{Make a multirun simulation using a set of variable input parameters.}
\usage{
mrunLWFB90(
  paramvar,
  param.b90,
  paramvar_nms = names(paramvar),
  multirun.dir = "MultiRuns/",
  keep.subdirs = FALSE,
  cores = 2,
  showProgress = TRUE,
  ...
)
}
\arguments{
\item{paramvar}{Data.frame of variable input parameters. For each row,
a simulation is performed, with the elements in \code{param.b90} being replaced by the
respective column of \code{paramvar}. All parameter names (column names) in \code{paramvar} must be found in \code{param.b90}.}

\item{param.b90}{Named list of parameters, in which the parameters defined in \code{paramvar} will be replaced.}

\item{paramvar_nms}{Names of the parameters in \code{paramvar} to be replaced in \code{param.b90}.}

\item{multirun.dir}{Directory name where to create the subdirectories for the single runs. Default is 'MultiRuns/'.}

\item{keep.subdirs}{Keep sub-directories of the single runs? Default is FALSE.}

\item{cores}{Number of CPUs to use for parallel processing. Default is 2.}

\item{showProgress}{Show progressbar? Default is TRUE.}

\item{...}{Additional arguments passed to \code{\link{runLWFB90}}:
provide at least the arguments that have no defaults (\code{options.b90} and \code{climate})!}
}
\value{
A named list with the results of the single runs as returned by \code{\link{runLWFB90}}.
Simulation or processing errors are passed on.
}
\description{
Wrapper function for \code{\link{runLWFB90}} to make multiple simulations parallel,
with varying input parameters.
}
\section{File management}{

The LWF-Brook90 output files of the single runs are stored in subdirectories within 'multirun.dir'.
If \code{keep.subdirs=FALSE}, subdirectories are deleted after successful singlerun simulation. In case of an error,
the respective subdirectory is not deleted. The returned list of single run results can become very large,
if many simulations are done and the selected output contains daily resolution datasets, and especially daily layer-wise soil moisture data.
To not overload memory, it is advised to reduce the returned simulation results to a minimum, by carefully selecting the output,
and make use of the option to pass a list of functions to \code{\link{runLWFB90}} (argument \code{output_fun}). These functions
perform directly on the output of a single run simulation, and can be used for aggrating model output on-the-fly.
}

\section{Parameter updating}{

The transfer of values from a row in paramvar to param.b90 before each single run
simulation is done by matching names from \code{paramvar} and \code{param.b90}. In order to adress data.frame
or vector elements in \code{param.b90} by a column name in \code{paramvar}, the respective column name
has to be setup from its name and index in \code{param.b90}. To replace, e.g., the 2nd value of \code{ths}
in the \code{soil_materials} data.frame, the respective column name in \code{paramvar}
has to be called 'soil_materials.ths2'. In order to replace the 3rd value of \code{maxlai} vector in \code{param.b90},
the column has to be named 'maxlai3'.
}

\examples{
# Set up lists containing model control options and model parameters:
param.b90 <- setparam_LWFB90()
# choose the 'Coupmodel' shape option for the annual lai dynamic,
# with fixed budburst and leaf fall dates:
options.b90 <- setoptions_LWFB90(startdate = as.Date("2002-01-01"),
                                 enddate = as.Date("2003-12-31"),
                                 lai.method = 'Coupmodel',
                                 budburst.method = 'fixed',
                                 leaffall.method = 'fixed')

# Derive soil hydraulic properties from soil physical properties using pedotransfer functions
soil <- cbind(slb1_soil, hydpar_wessolek_mvg(slb1_soil$texture))

#set up data.frame with variable parameters
n <- 5
vary_parms <- data.frame(shape.optdoy = runif(n,180,240),
                         shape.budburst = runif(n, 0.1,1),
                         winlaifrac = runif(n, 0,0.5),
                         budburstdoy = runif(n,100,150),
                         soil_materials.ths3 = runif(n, 0.3,0.5), #' ths of material 3
                         maxlai2 = runif(n,4,8)) #' lai in the 2nd year of the simulation

# add the soil as soil_nodes and soil materials to param.b90, so ths3 can be looked up
param.b90[c("soil_nodes", "soil_materials")] <- soil_to_param(soil)

# set up maxlai with length 2, so maxlai2 of paramvar can be looked up
param.b90$maxlai <- c(5, 5)

# Make a Multirun-Simulation
b90.multi <- mrunLWFB90(paramvar = vary_parms,
                        param.b90 = param.b90,
                        options.b90 = options.b90,
                        climate = slb1_meteo)
names(b90.multi)

# extract results: EVAPDAY.ASC
evapday <- data.frame(data.table::rbindlist(lapply(b90.multi,
                                                   FUN = function(x) {x[["EVAPDAY.ASC"]]}),
                                            idcol = "srun"))
evapday$dates <- as.Date(paste(evapday$YR, evapday$DOY),"\%Y \%j")

srun_nms <- unique(evapday$srun)

with(evapday[evapday$srun == srun_nms[1], ],
     plot(dates, cumsum(EVAP), type = "n",
          ylim = c(0,1000))
)
for (i in 1:length(b90.multi)){
  with(evapday[evapday$srun == srun_nms[i], ],
       lines(dates, cumsum(EVAP)))
}
}
