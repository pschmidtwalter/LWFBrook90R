[{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBook90R-1-Intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to LWFBrook90R","text":"LWF-BROOK90 (Hammel Kennel 2001) soil vegetation atmosphere transport (SVAT) model calculate daily evaporation (transpiration, interception, soil evaporation) soil water fluxes, along soil water contents soil water tension soil profile covered vegetation. upgraded version original BROOK90 model (Federer, Vörösmarty, Fekete 2003; Federer 2002), featuring additional parameterizations soil water retention conductivity functions (Mualem 1976; Genuchten 1980), option take interannual variation aboveground vegetation characteristics account. package core function run_LWFB90() runs LWF-Brook90 : creating model input objects climate driving data, model control options parameters, executing model code, returning model output. model control options thereby let select different functions defining aboveground stand dynamics, phenology, root length density depth distributions. Additionally, set pedotransfer functions provided derive hydraulic parameters soil physical properties. vignette, use meteorological soil data longterm monitoring beech forest site SLB1 Solling mountains, Germany, available loading package. reproduce examples, load ‘LWFBrook90R’ ‘data.table’ package:","code":"library(LWFBrook90R) library(data.table)"},{"path":[]},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBook90R-1-Intro.html","id":"input-objects","dir":"Articles","previous_headings":"Basic usage","what":"Input Objects","title":"Introduction to LWFBrook90R","text":"first step, need set input objects central function runLWFB90(). Aside meteorological soil data, need define model control options model parameter objects. model options contain basic information simulation sub-models use (e.g. start end dates simulation, precipitation interval, phenology model, root length density depth distribution function, etc). model parameter object contains 100 parameters, required run model, take effect certain model control options selected (see vignette Model control options parameters). Two functions available can used generate default lists model options parameters: created objects can easily manipulated reference, simply assigning values option parameter names directly function calls. look meanings various options parameters see ?set_optionsLWFB90 ?set_paramLWFB90. meaning context input parameters (output variables) can also looked documentation original BROOK90 model version Tony Federer’s webpages, always recommended source information working BROOK90 version. run LWF-BROOK90 Solling beech site, need prepare soil data model. data.frame slb1_soil contains soil physical data soil horizons, yet hydraulic parameters LWF-BROOK90 requires. Fortunately, ‘LWFBrook90R’ comes set pedotransfer functions derive Mualem/van Genuchten (MvG) parameters soil water retention hydraulic conductivity functions. use texture tabulated values Wessolek, Renger & Kaupenjohann (2009) create data.frame containing required MvG-parameters along soil physical data:","code":"options_b90 <- set_optionsLWFB90() param_b90 <- set_paramLWFB90() soil <- cbind(slb1_soil, hydpar_wessolek_tab(texture = slb1_soil$texture))"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBook90R-1-Intro.html","id":"single-run-simulation","dir":"Articles","previous_headings":"Basic usage","what":"Single-run simulation","title":"Introduction to LWFBrook90R","text":"Now load meteorological dat, ready perform single-run simulation using function run_LWFB90(): run_LWFB90() thereby derives daily stand properties (lai, sai, height, densef, age) root distribution parameters, passes climate, vegetation properties parameters Fortran dynamic library. simulation finished, list model output (output, layer_output) returned, along model input (options_b90, param_b90 derived daily vegetation properties standprop_daily): list entry output contains calendar variables (‘yr’, ‘mo’, ‘da’, ‘doy’), daily actual evaporation fluxes (‘evap’, ‘tran’, ‘irvp’, ‘isvp’, ‘slvp’, ‘snvp’), potential evaporation transpiration fluxes (‘pint’, ‘pslvp’, ‘ptran’), soil water flux (‘flow’, ‘vrfln’) state variables (‘swat’, ‘awat’, ‘relawat’). detailed description output variables refer help pages (?run_LWFB90). plot data, convenient derive Date object calendar variables. use data.table syntax : second result set (list item layer_output) contains daily soil moisture state variables belowground water fluxes individual soil layers. want plot absolute soil water storage (‘swati’) soil depth 100 cm, need integrate b90res$layer_output$swati 15 uppermost soil layers: Now can plot soil water storage transpiration: Simulation results sample data","code":"data(\"slb1_meteo\") b90res <- run_LWFB90(options_b90 = options_b90,                      param_b90 = param_b90,                      climate = slb1_meteo,                      soil = soil) str(b90res, max.level = 1) #> List of 5 #>  $ simulation_duration: 'difftime' num 4.07710194587708 #>   ..- attr(*, \"units\")= chr \"secs\" #>  $ finishing_time     : POSIXct[1:1], format: \"2022-06-10 08:05:46\" #>  $ model_input        :List of 3 #>  $ output             :Classes 'data.table' and 'data.frame':    730 obs. of  47 variables: #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  $ layer_output       :Classes 'data.table' and 'data.frame':    15330 obs. of  15 variables: #>   ..- attr(*, \".internal.selfref\")=<externalptr> b90res$output[, dates := as.Date(paste(yr, mo, da, sep = \"-\"))] b90res$layer_output[, dates := as.Date(paste(yr, mo, da, sep = \"-\"))] swat100cm <- b90res$layer_output[which(nl <= 15), list(swat100cm = sum(swati)),                                 by  = dates]"},{"path":[]},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-2-Options_Param.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Model control options and parameters","text":"vignette demonstrates use different model control option setting (options_90-argument runLWFB90()) parameters (param_b90-argument). Aside basic technical information simulation (startdate, enddate, fornetrad, prec_interval correct_prec), model control options control annual course leaf area index (lai_method), phenology models use (budburst_method, leaffall_method), input interpolations annual stand properties (standprop_input, standprop_interp, use_growthperiod) root density depth distribution function use (root_method). interplay options parameters shown briefly following paragraphs, describing options parameters passed options_b90 param_b90 arguments individual functions called within run_LWFB90(). purpose, create basic lists model control options parameters, well soil climate objects.","code":"library(LWFBrook90R) library(data.table)  options_b90 <- set_optionsLWFB90() param_b90 <- set_paramLWFB90()"},{"path":[]},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-2-Options_Param.html","id":"intra-annual-variation-of-leaf-area-index","dir":"Articles","previous_headings":"Aboveground vegetation characteristics","what":"Intra-annual variation of leaf area index","title":"Model control options and parameters","text":"default parameter set (created set_paramLWFB90()) represents deciduous forest stand, without leafs winter maximum leaf area index summer. maximum leaf area index defined parameter param_b90$maxlai, minimum value winter internally calculated fraction (param_b90$winlaifrac) param_b90$maxlai. basic shape intra-annual leaf area index dynamics can selected option options_b90$lai_method. default setting 'b90' makes use parameters budburstdoy, leaffalldoy, emergedur leaffalldur, define dates budburst leaffall, durations leaf unfolding leaf shedding maxlai, respectively winlaifrac winter reached. Within run_LWFB90(), parameters passed make_seasLAI() constructs daily timeseries leaf area index development single year: make_seasLAI() also provides shape functions require additional parameters. example, option lai_method = 'linear' uses value pairs day--year leaf area index fraction maxlai passed parameters param_b90$lai_doy param_b90$lai_frac. doy/value-pairs used interpolate intra-annual course leaf area index daily time series. third shape-option intra-annual variation leaf area index called ‘Coupmodel’ uses interpolation method implemented ‘Coupmodel’ (Jansson Karlberg 2004). lai_method ='Coupmodel, form parameters leaf unfolding leaf fall (shp_budburst, shp_leaffall), date leaf area maximum (shp_optdoy) required, addition parameters required lai_method = 'b90'. plot three methods shows roles different parameters: Methods featured make_seasLAI()","code":"LAI_b90 <-  make_seasLAI(method = options_b90$lai_method,                          year = 2003,                          maxlai = param_b90$maxlai,                          winlaifrac = param_b90$winlaifrac,                          budburst_doy = param_b90$budburstdoy,                          leaffall_doy = param_b90$leaffalldoy,                          emerge_dur = param_b90$emergedur,                          leaffall_dur = param_b90$leaffalldur) options_b90$lai_method <- \"linear\" param_b90$lai_doy <- c(1,110,117,135,175,220,250,290,365) param_b90$lai_frac <- c(0.1,0.1,0.5,0.7,1.2,1.2,1.0,0.1,0.1) LAI_linear <-  make_seasLAI(method = options_b90$lai_method,                             year = 2003,                             maxlai = param_b90$maxlai,                             lai_doy = param_b90$lai_doy ,                             lai_frac = param_b90$lai_frac) options_b90$lai_method <- \"Coupmodel\" param_b90$shp_budburst <- 0.5 param_b90$shp_leaffall <- 5 param_b90$shp_optdoy <- 180 LAI_coupmodel <-  make_seasLAI(method = options_b90$lai_method,                                year = 2003,                                maxlai = param_b90$maxlai,                                budburst_doy = param_b90$budburstdoy,                                leaffall_doy = param_b90$leaffalldoy,                                shp_budburst = param_b90$shp_budburst,                                shp_leaffall = param_b90$shp_leaffall,                                shp_optdoy = param_b90$shp_optdoy)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-2-Options_Param.html","id":"inter-annual-variation-of-leaf-area-index","dir":"Articles","previous_headings":"Aboveground vegetation characteristics","what":"Inter-annual variation of leaf area index","title":"Model control options and parameters","text":"passing single value via param_b90$maxlai used maximum leaf area index year simulation period. order incorporate -year variation leaf area index, can simply assign vectors values year simulation period parameters used function make_seasLAI(). following example, pass three values maxlai shp_optdoy, get different seasonal courses leaf area index three years simulation period. Additionally, add variation dates budburst, assigning vector values parameter budburstdoy. Options parameters affecting interannual variation leaf area index. Beside obvious -year variation maximum leaf area index, can also see effect shape parameter leaf unfolding phase shp_budburst. Values greater 1 result concave, values 1 convex functions, values 1 give linear progressions. budburst day--year varying specified parameters, can also estimated using temperature based phenology models. selecting settings default options_b90$budburst_method = 'fixed' options_b90$leaffall_method = 'fixed', vegperiod() function ‘vegperiod’-Package called within run_LWFB90. budburstdoy /leaffalldoy calculated year climate data using desired methods. See vegperiod list available models. estimated values budburstdoy /leaffalldoy can found param_b90 list element results object simulation.","code":"years <- 2001:2003 param_b90$maxlai <- c(4,6,5) param_b90$shp_optdoy <- c(210,180,240) param_b90$shp_budburst <- c(3,1,0.3) param_b90$budburstdoy <- c(100,135,121)  lai_variation <- make_seasLAI(method = options_b90$lai_method,                               year = years,                               maxlai = param_b90$maxlai,                               budburst_doy = param_b90$budburstdoy,                               leaffall_doy = param_b90$leaffalldoy,                               shp_budburst = param_b90$shp_budburst,                               shp_leaffall = param_b90$shp_leaffall,                               shp_optdoy = param_b90$shp_optdoy)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-2-Options_Param.html","id":"other-plant-properties-height-sai-densef","dir":"Articles","previous_headings":"Aboveground vegetation characteristics","what":"Other plant properties (height, sai, densef)","title":"Model control options and parameters","text":"Like leaf area index parameters budburst/leaffall-dates, also possible provide vectors values stand height (height), stem area index (sai), stand density (densef) generate -year variation stand characteristics. yearly values, daily values interpolated using function approx_standprop(). approx.method- argument function defines interpolate yearly values passed y. Within run_LWFB90(), option options_b90$standprop_interp passed approx.method- argument approx_standprop. default interpolation method standprop_interp = 'constant' results yearly changing step function, standprop_interp = 'linear' interpolates values: linear interpolation, additional parameters height_ini, sai_ini, densef_ini provided run_LWFB90() via param_b90-argument. parameters define values beginning simulation, value first year interpolated . default, yearly values interpreted valid December 31st respective years, interpolated timeseries linearly increasing decreasing whole year. order constrain interpolation growth period , option options_b90$use_growthperiod introduced, requires arguments startdoy enddoy, set TRUE. , values decrease increase budburst leaffall , remain constant winter. following plot explains differences interpolated timeseries stand height using different options parameters: Interpolated stand height derived parameters using approx_standprop() Another option incorporating -year variation plant properties provide data.frame yearly values height, maxlai, sai, densef age list item standprop_table param_b90. take effect, option options_b90$standprop_input set 'table'. case, values passed via parameters height, sai, densef age_ini ignored. maxlai also provided via table, maxlai value parameters ignored well, parameters affect intra-annual leaf area development (e.g., shp_budburst) still active. demonstration purposes use table slb1_standprop, contains observed stand data Solling Beech Experimental site 1966 2014, along estimated leaf stem area index derived using allometric functions. creating daily timeseries stand properties, use run_LWFB90(), make use option run model (run = FALSE), return model input. Stand properties generated using table input annual stand characteristics","code":"# constant 'interpolation' options_b90$standprop_interp <- 'constant' param_b90$height <- c(20.2,20.8,21.3) simyears <- 2002:2003 height_c <- approx_standprop(x_yrs=years,                              y = param_b90$height,                              approx.method = options_b90$standprop_interp)  # linear interpolation        options_b90$standprop_interp <- 'linear' param_b90$height_ini <- 19.1 height_l <- approx_standprop(x_yrs=years,                              y = param_b90$height,                              y_ini = param_b90$height_ini,                              approx.method = options_b90$standprop_interp) options_b90$use_growthperiod <- TRUE height_l_gp <- approx_standprop(x_yrs = years,                                 y = param_b90$height,                                 y_ini = param_b90$height_ini,                                 use_growthperiod = options_b90$use_growthperiod,                                 startdoy = param_b90$budburstdoy,                                 enddoy = param_b90$leaffalldoy,                                 approx.method = options_b90$standprop_interp) #Extend simulation period options_b90$startdate <- as.Date(\"1980-01-01\") options_b90$enddate <- as.Date(\"1999-12-31\")  soil <- cbind(slb1_soil, hydpar_wessolek_tab(texture = slb1_soil$texture))   #set up options for table input  options_b90$standprop_input <- 'table' param_b90$standprop_table <- slb1_standprop  # Set up dynamic budburst and leaf fall options_b90$budburst_method <- \"Menzel\" options_b90$leaffall_method <- \"vonWilpert\" param_b90$budburst_species <- \"Fagus sylvatica\"  #run LWF-Brook90 without simulation standprop_daily <- run_LWFB90(options_b90 = options_b90,                               param_b90 = param_b90,                               climate = slb1_meteo,                               soil = soil,                               output = output,                                run = FALSE)$standprop_daily"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-2-Options_Param.html","id":"root-density-depth-distribution","dir":"Articles","previous_headings":"","what":"Root density depth distribution","title":"Model control options and parameters","text":"root depth density depth distribution can either provided column rootden soil- argument run_LWFB90(), can derived parameters using function make_rootden(). order use root density specified soil data, root_method element options_b90-list set 'soilvar'. method names passed make_rootden(). Currently, function provides four methods assign values relative root density vector soil depths. default method 'betamodel' uses model Gale & Grigal (-Gale Grigal (1987)), form \\(y = 1- \\beta^d\\), \\(y\\) cumulative root fraction soil depth \\(d\\) \\(\\beta\\) depth coefficient. Larger values \\(\\beta\\) correspond greater proportion roots deeper soil layers:  larger values \\(\\beta\\), root density reach zero deep soil layers. order set root density zero desired soil depth, parameter maxrootdepth defined. parameter, root density set zero soil layers lie deeper maxrootdepth. Within run_LWFB90(), function called following way: second option define root distribution soil layers provide value pairs soil depth root density data.frame assign rootden_table-entry param_b90. example, set hypothetical root density depth distribution: third option generates linear root density depth distribution, maximum uppermost soil layer root density 0 maxrootdepth. parameter relrootden provided, first element vector used maximum, otherwise interpolation made 0 1. last option returns uniform root distribution, first vector-element relrootden (provided) value layers maxrootdepth.","code":"param_b90$maxrootdepth <- -1.4 options_b90$root_method <- \"betamodel\"  roots_beta <- make_rootden(soilnodes = c(max(slb1_soil$upper), slb1_soil$lower),                             maxrootdepth = param_b90$maxrootdepth,                            beta = param_b90$betaroot,                            method = options_b90$root_method) options_b90$root_method <- 'table' param_b90$rootden_table <- data.frame(   upper = c(0.03,0,-0.02, -0.15, -0.35, -0.5, -0.65,-0.9,-1.1,-1.3),   lower = c(0,-0.02, -0.15, -0.35, -0.5, -0.65,-0.9,-1.1,-1.3,-1.6),   rootden = c(10,15, 35, 15, 7.5, 4, 12, 2, 2, 0)) roots_table <- make_rootden(soilnodes = c(max(slb1_soil$upper), slb1_soil$lower),                              method = options_b90$root_method,                              rootdat = param_b90$rootden_table) options_b90$root_method <- 'linear' roots_linear <- make_rootden(soilnodes = c(max(slb1_soil$upper), slb1_soil$lower),                               maxrootdepth = param_b90$maxrootdepth,                              method = options_b90$root_method) options_b90$root_method <- 'const' roots_constant <- make_rootden(soilnodes = c(max(slb1_soil$upper), slb1_soil$lower),                                 maxrootdepth = param_b90$maxrootdepth,                                method = options_b90$root_method)"},{"path":[]},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-3-Multiruns.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Multi-run simulations in LWFBrook90R","text":"‘LWFBrook90R’, parallelized multi-run simulations can performed conveniently, extending basic single-run applications using function run_LWFB90() described introductory vignette. Two different multi-run functions exist two different problems: Perform Monte-Carlo simulations single parameters set variation, simulations multiple locations, parameter sets, climate scenarios. first case, function run_multi_LWFB90() available. second problem can tackled using function run_multisite_LWFB90(), described detail vignette ‘Multi-Site simulations’. functions wrapper functions run_LWFB90() allow parallel processing tasks, using specified number CPUs speed execution multi-run simulation. return lists containing individual single run simulation results, returned run_LWFB90(). result-lists can become large many simulations performed, selected output comprises daily data sets especially individual soil layers’ daily soil moisture states. Huge amounts data produced can overload memory, vignette therefore starts data management section make best use output_fun-argument run_LWFB90() reduce amount data returned.","code":"library(LWFBrook90R) library(data.table)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-3-Multiruns.html","id":"data-management-i-output_fun-argument","dir":"Articles","previous_headings":"","what":"Data management (i): output_fun-argument","title":"Multi-run simulations in LWFBrook90R","text":"minimize memory allocation, recommended reduce selected output minimum make use output_fun-argument run_LWFB90(). argument, possible pass custom functions run_LWFB90(), directly perform simulation output list object. rtrn_output = FALSE, original simulation output (output, layer_output) can discarded, results output_fun-argument returned. can useful model calibration sensitivity analyses tasks comprising ten thousands simulations Monte-Carlo setting. magnitude, memory allocation critical, relatively small output can returned individual simulation (e.g., measure agreement simulated observed values). Similarly, possible define functions custom output aggregation, redirect simulation output file database, see later. demonstrate usage output_fun-argument, perform Monte-Carlo simulation using function run_multi_LWFB90(), define function returns annual mean soil water storage transpiration growing season. first step, function integrates depth-specific soil moisture soil water storage specified soil layer (tolayer, passed via ... output_fun), second step calculates mean soil water storage growing season, along sum transpiration. growing season thereby defined input parameters budburstdoy leaffalldoy. test custom output function run single-run simulation apply function return, see custom output function works:","code":"output_function <- function(x, tolayer) {   # aggregate SWAT   swat_tran <- x$layer_output[which(nl <= tolayer),                               list(swat = sum(swati)),                               by  = list(yr, doy)]   #add transpiration from EVAPDAY.ASC   swat_tran$tran <- x$output$tran    # get beginning and end of growing season from input parameters   vpstart <- x$model_input$param_b90$budburstdoy   vpend <- x$model_input$param_b90$leaffalldoy   swat_tran <- merge(swat_tran,                      data.frame(yr = unique(swat_tran$yr),                                 vpstart, vpend), by = \"yr\")   # mean swat and tran sum   swat_tran[doy >= vpstart & doy <= vpend,             list(swat_vp_mean = mean(swat), tran_vp_sum = sum(tran)), by = yr] } data(\"slb1_meteo\") data(\"slb1_soil\") soil <- cbind(slb1_soil, hydpar_wessolek_tab(texture = slb1_soil$texture)) b90res <- run_LWFB90(options_b90 = set_optionsLWFB90(),                      param_b90 = set_paramLWFB90(),                      climate = slb1_meteo,                      soil = soil) output_function(b90res, tolayer = 15) #>      yr swat_vp_mean tran_vp_sum #> 1: 2002     290.1533    202.9172 #> 2: 2003     226.4391    305.4688"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-3-Multiruns.html","id":"multi-run-simulations-with-run_multi_lwfb90","dir":"Articles","previous_headings":"","what":"Multi-run simulations with run_multi_LWFB90()","title":"Multi-run simulations in LWFBrook90R","text":"mentioned, run_multi_LWFB90() wrapper run_LWFB90(). run_multi_LWFB90() takes data.frame paramvar containing variable parameter values columns realizations rows. row paramvar, respective parameter values param_b90 replaced name, run_LWFB90() called. arguments run_LWFB90() specified passed . multi-run simulation, set two parameters variation, maximum leaf area index (maxlai) maximum leaf conductance (glmax). define data.frame two columns, containing 50 random uniform realizations two parameters: Now can run simulation. suppress selected simulation result objects model input returned, return values output_fun defined . pass tolayer = 15 soil water storage integrated 15th soil layer, corresponding 0-100 cm soil depth. Note param_b90 object (thus parameters budburstdoy leaffalldoy) available output_fun, although included return (rtrn_input = FALSE). result list individual single-run results, can easily extract results output function rbindlist() together data.table: Now can display results 50 simulations using boxplots: Growing season soil water storage transpiration 50 simulations, random variation parameters ‘maxlai’ ‘glmax’ ran 50 simulations, climate, soil, parameters except maxlai glmax, varied randomly. next vignette ‘Multi-Site simulations’, learn make use multiple climate, soil, parameter sets using function run_multisite_LWFB90(), simulate set different sites.","code":"set.seed(2021) N=50 paramvar <- data.frame(maxlai = runif(N, 4,7),                        glmax = runif(N,0.003, 0.01)) mrun_res <- run_multi_LWFB90(paramvar = paramvar,                              param_b90 = set_paramLWFB90(),                              cores = 2, # arguments below are passed to run_LWFB90()                              options_b90 = set_optionsLWFB90(),                               climate = slb1_meteo,                              soil = soil,                               rtrn_input = FALSE, rtrn_output = FALSE,                              output_fun = output_function,                              tolayer = 15) # argument to output_fun mrun_dt <- rbindlist(lapply(mrun_res, function(x) x$output_fun[[1]]),                       idcol = \"singlerun\")"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-4-Multisite-Runs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Multi-Site simulations using `run_multisite_LWFB90()`","text":"previous vignette ‘Multi-run simulations LWFBrook90R’, learned make multiple simulations using set variable model parameters using function run_multi_LWFB90(). simulate set different sites different soil, climate vegetation input, can use function run_multisite_LWFB90() subject vignette.","code":"library(LWFBrook90R) library(data.table) data(\"slb1_meteo\") data(\"slb1_soil\") soil <- cbind(slb1_soil, hydpar_wessolek_tab(texture = slb1_soil$texture))"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-4-Multisite-Runs.html","id":"list-input-for-soil-climate-and-param_b90","dir":"Articles","previous_headings":"","what":"List input for soil, climate and param_b90","title":"Multi-Site simulations using `run_multisite_LWFB90()`","text":"function run_multisite_LWFB90() runs lists param_b90, climate, soil-objects, evaluates specified parameter sets soil/climate combinations. demonstrate usage, define two parameter sets, want run three different sites (.e. unique combinations climate soil). include two parameter sets list parms_l: pretend three sites individual climates soils, set lists soil climate input: Now can run small example: results returned named list single run objects, names concatenated names input list entries holding individual param_b90, climate, soil input objects:","code":"parms_beech <- set_paramLWFB90(maxlai = 6) parms_spruce <- set_paramLWFB90(maxlai = 4.5, winlaifrac = 0.8) parms_l <- list(beech = parms_beech, spruce = parms_spruce) soils_l <- list(soil1 = soil, soil2 = soil, soil3 = soil) climates_l <- list(clim1 = slb1_meteo, clim2 = slb1_meteo, clim3 = slb1_meteo) startdate <- as.Date(\"2002-06-01\") enddate <- as.Date(\"2002-06-30\")  msite_run1 <- run_multisite_LWFB90(   options_b90 = set_optionsLWFB90(startdate = startdate, enddate = enddate),   param_b90 = parms_l,   climate = climates_l,   soil = soils_l,   cores = 2) str(msite_run1, max.level = 1) #> List of 6 #>  $ clim1 soil1 beech :List of 5 #>  $ clim1 soil1 spruce:List of 5 #>  $ clim2 soil2 beech :List of 5 #>  $ clim2 soil2 spruce:List of 5 #>  $ clim3 soil3 beech :List of 5 #>  $ clim3 soil3 spruce:List of 5"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-4-Multisite-Runs.html","id":"data-management-ii-a-function-as-climate-argument","dir":"Articles","previous_headings":"","what":"Data management (ii): A function as climate-argument","title":"Multi-Site simulations using `run_multisite_LWFB90()`","text":"function run_multisite_LWFB90() can easily set run dozens sites individual climate data. However, simulating thousands sites can easily cause errors, large list climate data.frames might overload memory usual desktop computer. Fortunately, possible pass function instead data.frame climate-argument run_LWFB90(). function can used create climate-data.frame file database-connection within run_LWFB90() run_multisite_LWFB90() fly. run_LWFB90(), can simply provide arguments function via ...-placeholder. run_multisite_LWFB90(), need pass arguments climate-function (possibly individual values individual site, e.g. file name) via climate_args-argument. demonstrate mechanism, write three files climatic data temporary location, read back later: testing, perform single run run_LWFB90() use fread function ‘data.table’-package climate-argument. function reads text-files, takes file name argument include call. points first three climate files: construct basically works function run_multisite_LWFB90(). difference single-run simulations arguments function specified named list lists, one sub-list site. set follows: Now call run_multisite_LWFB90(), set function fread climate-parameter. list lists individual arguments fread passed function via climate_args: simulated two parameter sets using three different climate/soil combinations: names climate used result names now coming top-level names list clim_args, used function climate-argument. function fread evaluated directly within run_multisite_LWFB90(), passed run_LWFB90(), otherwise evaluated single-run simulation. way, fread evaluated three times total six simulations saves us execution time, case want simulate multiple parameter sets using climatic data.","code":"tdir <- tempdir() fnames <- paste0(tdir, \"/clim\", 1:3, \".csv\") lapply(fnames, function(x) {   write.csv(slb1_meteo[year(slb1_meteo$dates) == 2002,],              file = x, row.names = FALSE) }) #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> NULL srun <- run_LWFB90(   options_b90 = set_optionsLWFB90(startdate = startdate, enddate = enddate),   param_b90 = set_paramLWFB90(),   soil = soil,   climate = fread,   file = fnames[1],   rtrn.input = FALSE) clim_args <- list(climfromfile1 = list(file = fnames[1]),                   climfromfile2 = list(file = fnames[2]),                   climfromfile3 = list(file = fnames[3])) msite_run2 <- run_multisite_LWFB90(   options_b90 = set_optionsLWFB90(startdate = startdate, enddate = enddate),   param_b90 = parms_l,   soil = soils_l,   climate = fread,   climate_args = clim_args,   cores = 2) str(msite_run2, max.level = 1) #> List of 6 #>  $ climfromfile1 soil1 beech :List of 5 #>  $ climfromfile1 soil1 spruce:List of 5 #>  $ climfromfile2 soil2 beech :List of 5 #>  $ climfromfile2 soil2 spruce:List of 5 #>  $ climfromfile3 soil3 beech :List of 5 #>  $ climfromfile3 soil3 spruce:List of 5"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/articles/LWFBrook90R-4-Multisite-Runs.html","id":"multi-site-simulation-input-from-file-output-to-file","dir":"Articles","previous_headings":"","what":"Multi-site simulation: Input from file, output to file","title":"Multi-Site simulations using `run_multisite_LWFB90()`","text":"Now learned use function climate input, can combine input facility output_fun writes simulation results file. , extend output function previous vignette ‘Multi-run simulations LWFBrook90R’ writes aggregated results file specified directory. file name constructed names current soil, climate, parameter object, passed automatically run_multisite_LWFB90() run_LWFB90() character variables soil_nm, clim_nm, param_nm. way, names currently processed input objects accessible output_fun-functions within run_LWFB90(). Now can run simulations, climate data coming files, results written file temporary directory tdir: simulation finished, can list files see attempt successful: can also use database connection objects instead files read climate data save simulation results. input climate data, connection objects can defined advance, passed directly climate-function. However, work output_fun parallel setting like run_multisite_LWFB90() run_multi_LWFB90(), file database connections R exported parallel workers. Connections therefore set (closed ) within output_fun-function.","code":"output_function <- function(x, tolayer, basedir = getwd(),                             soil_nm, clim_nm, param_nm ) {   # file-name   filenm = file.path(basedir, paste(soil_nm, clim_nm, param_nm, sep = \"_\"))      # aggregate SWAT   swat_tran <- x$layer_output[which(nl <= tolayer),                               list(swat = sum(swati)),                              by  = list(yr, doy)]   #add transpiration from EVAPDAY.ASC   swat_tran$tran <- x$output$tran      # get beginning and end of growing season from input parameters   vpstart <- x$model_input$param_b90$budburstdoy   vpend <- x$model_input$param_b90$leaffalldoy   swat_tran <- merge(swat_tran,                      data.frame(yr = unique(swat_tran$yr),                                 vpstart, vpend), by = \"yr\")   # mean swat and tran sum   swattran_vp <- swat_tran[doy >= vpstart & doy <= vpend,              list(swat_vp_mean = mean(swat), tran_vp_sum = sum(tran)), by = yr]      write.csv(swattran_vp, file = paste0(filenm, \".csv\")) } msite_run3 <- run_multisite_LWFB90(   options_b90 = set_optionsLWFB90(startdate = startdate, enddate = enddate),   param_b90 = parms_l,   soil = soils_l,   climate = fread,   climate_args = clim_args,   rtrn_input = FALSE, rtrn_output = FALSE,   output_fun = output_function,   tolayer = 15,   basedir = tdir,   cores = 2) list.files(tdir, pattern = \"csv\") #> [1] \"clim1.csv\"                      \"clim2.csv\"                      #> [3] \"clim3.csv\"                      \"soil1_climfromfile1_beech.csv\"  #> [5] \"soil1_climfromfile1_spruce.csv\" \"soil2_climfromfile2_beech.csv\"  #> [7] \"soil2_climfromfile2_spruce.csv\" \"soil3_climfromfile3_beech.csv\"  #> [9] \"soil3_climfromfile3_spruce.csv\""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Schmidt-Walter. Author, maintainer. Volodymyr Trotsiuk. Author. Klaus Hammel. Author. Martin Kennel. Author. Anthony Federer. Author. Robert Nuske. Contributor. Bavarian State Institute Forestry (LWF). Copyright holder, funder. Northwest German Forest Research Institute (NW-FVA). Copyright holder, funder.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schmidt-Walter P, Trotsiuk V, Hammel K, Kennel M, Federer (2022). LWFBrook90R: Simulate Evapotranspiration Soil Moisture SVAT Model LWF-Brook90. R package version 0.5.0, https://github.com/pschmidtwalter/LWFBrook90R.","code":"@Manual{,   title = {LWFBrook90R: Simulate Evapotranspiration and Soil Moisture with the SVAT Model LWF-Brook90},   author = {Paul Schmidt-Walter and Volodymyr Trotsiuk and Klaus Hammel and Martin Kennel and Anthony Federer},   year = {2022},   note = {R package version 0.5.0},   url = {https://github.com/pschmidtwalter/LWFBrook90R}, }"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/index.html","id":"lwfbrook90r","dir":"","previous_headings":"","what":"Simulate Evapotranspiration and Soil Moisture with the SVAT Model LWF-Brook90 ","title":"Simulate Evapotranspiration and Soil Moisture with the SVAT Model LWF-Brook90 ","text":"LWFBroo90R provides implementation Soil Vegetation Atmosphere Transport (SVAT) model LWF-BROOK90 (Hammel & Kennel, 2001) written Fortran. model simulates daily transpiration, interception, soil snow evaporation, streamflow soil water fluxes soil profile covered vegetation. set high-level functions model set , execution parallelization provide easy access plot-level SVAT simulations, well multi-run large-scale applications.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate Evapotranspiration and Soil Moisture with the SVAT Model LWF-Brook90 ","text":"can install released version LWFBrook90R CRAN : development version can installed Github using package remotes:","code":"install.packages(\"LWFBrook90R\") remotes::install_github(repo=\"pschmidtwalter/LWFBrook90R\", build_vignettes = TRUE)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Simulate Evapotranspiration and Soil Moisture with the SVAT Model LWF-Brook90 ","text":"basic example. complex examples take look packages vignettes browseVignettes(\"LWFBrook90R\"). main function run_LWFB90() creates model input model control options, parameters, climate soil data returns simulation results. Plot results","code":"# load package and sample data library(LWFBrook90R) data(slb1_meteo, slb1_soil)  # set up default model control options and parameters opts <- set_optionsLWFB90() parms <- set_paramLWFB90()  # Derive soil hydraulic properties from soil physical properties  # using a pedotransfer function:  soil <- cbind(slb1_soil, hydpar_wessolek_tab(texture = slb1_soil$texture))  # run the model and capture results lwfb90_res <- run_LWFB90(options_b90 = opts,                          param_b90 = parms,                          climate = slb1_meteo,                          soil = soil)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Simulate Evapotranspiration and Soil Moisture with the SVAT Model LWF-Brook90 ","text":"Schmidt-Walter, P., Trotsiuk, V., Meusburger, K., Zacios, M., Meesenburg, H. (2020): Advancing simulations water fluxes, soil moisture drought stress using LWF-Brook90 hydrological model R. Agr. . Met. 291, 108023. https://doi.org/10.1016/j.agrformet.2020.108023","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Simulate Evapotranspiration and Soil Moisture with the SVAT Model LWF-Brook90 ","text":"Implementations methods creating model input (e.g. leaf area dynamics, root depth density distributions, pedotransfer functions) improvements highly welcome.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Simulate Evapotranspiration and Soil Moisture with the SVAT Model LWF-Brook90 ","text":"Paul Schmidt-Walter, Volodymyr Trotsiuk, Klaus Hammel, Martin Kennel, Tony Federer. Tony Federer’s original Brook90 Fortran 77 code (Brook90_v3.1F, License: CC0) enhanced Klaus Hammel Martin Kennel Bavarian State Institute Forestry (LWF) around year 2000. Since , LWF-BROOK90 distributed LWF upon request pre-compiled Fortran command line program together MS Access User Interface. 2019, Volodymyr Trotsiuk converted Fortran 77 code Fortran 95 implemented connection R. Paul Schmidt-Walter’s brook90r (Schmidt-Walter, 2018) package LWF-Brook90 input data generation, model execution result processing adapted extended control interface function.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Simulate Evapotranspiration and Soil Moisture with the SVAT Model LWF-Brook90 ","text":"GPL-3 Fortran R code. brook90r GPL-3, LWF-Brook90 without license recently. Lothar Zimmermann Stephan Raspe (LWF), previous Fortran contributors agreed assign GPL-3 Fortran code.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Simulate Evapotranspiration and Soil Moisture with the SVAT Model LWF-Brook90 ","text":"Federer C.. (2002): BROOK 90: simulation model evaporation, soil water, streamflow. http://www.ecoshift.net/brook/brook90.htm Federer C.., Vörösmarty, C., Fekete, B. (2003): Sensitivity Annual Evaporation Soil Root Properties Two Models Contrasting Complexity. J. Hydrometeorol. 4, 1276–1290. https://doi.org/10.1175/1525-7541(2003)004%3C1276:SOAETS%3E2.0.CO;2 Hammel, K., Kennel, M. (2001): Charakterisierung und Analyse der Wasserverfügbarkeit und des Wasserhaushalts von Waldstandorten Bayern mit dem Simulationsmodell BROOK90. Forstliche Forschungsberichte München 185. ISBN 978-3-933506-16-0 Schmidt-Walter, P. (2018). brook90r: Run LWF-BROOK90 hydrological model within R (Version v1.0.1). Zenodo. https://doi.org/10.5281/zenodo.1433677","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/LWFBrook90R.html","id":null,"dir":"Reference","previous_headings":"","what":"LWFBrook90R: A package for simulating water fluxes, soil moisture and drought\nstress using the SVAT Model LWF-Brook90. — LWFBrook90R","title":"LWFBrook90R: A package for simulating water fluxes, soil moisture and drought\nstress using the SVAT Model LWF-Brook90. — LWFBrook90R","text":"central function run_LWFB90() creates model input model control options, parameters, climate soil data, executes model code returns model results. model control options thereby let user select different methods defining phenology leaf area index seasonality, root density depth distributions, inter-annual variation stand properties. Additionally, set pedotransfer functions provided derive hydraulic parameters soil physical properties. introduction basic usage see vignette('intro_LWFB90').","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/approx_standprop.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a daily sequence of stand properties from parameters using\ninterpolation — approx_standprop","title":"Create a daily sequence of stand properties from parameters using\ninterpolation — approx_standprop","text":"Uses yearly values inter-annual vegetation development values (e.g. sai, height, densef, age) interpolates daily sequence.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/approx_standprop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a daily sequence of stand properties from parameters using\ninterpolation — approx_standprop","text":"","code":"approx_standprop(   x_yrs,   y,   y_ini = NULL,   xout_yrs = x_yrs,   use_growthperiod = FALSE,   startdoy = 121,   enddoy = 279,   approx.method = \"constant\",   return_xout = FALSE )"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/approx_standprop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a daily sequence of stand properties from parameters using\ninterpolation — approx_standprop","text":"x_yrs sequence years single year. y Vector length x_yrs. approx.method = 'linear', values interpreted valid end respective year x_yrs y_ini Initial value used starting point linear interpolation. Interpreted valid 1st January first year x_yrs. Ignored approx.method = 'constant'. xout_yrs Vector years output generated. May longer shorter x_yrs. years outside x_yrs, value closest data extrem returned. use_growthperiod Logical: Use startdoy enddoy linear interpolation? TRUE, yearly changes take place startdoy enddoy, othe wise end year end year . startdoy single value vector length x_yrs, day year growth begins. enddoy single value vector length x_yrs, day year growth cessates. approx.method Name interpolation method ('constant' 'linear'). return_xout Logical: true, daily values y date vector returned data.frame.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/approx_standprop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a daily sequence of stand properties from parameters using\ninterpolation — approx_standprop","text":"vector interpolated daily values","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/approx_standprop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a daily sequence of stand properties from parameters using\ninterpolation — approx_standprop","text":"approx.method = 'constant', value y   returned whole respective year x_yrs, results   yearly changing step function. approx.method = 'linear',   values y interpolated years x_yrs,   interpreted reached 31st December respective   x_yrs. case, y_ini required initial value,   sequence interpolated first value y.   linear changes either accomplished 31st 31st December   years x_yrs, growing season   (use_growingperiod = TRUE).","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/approx_standprop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a daily sequence of stand properties from parameters using\ninterpolation — approx_standprop","text":"","code":"years <- 2002:2004 height_yearly <- c(20.2,20.8,21.3)  # constant 'interpolation' height_c <- approx_standprop(x_yrs = years,                              y = height_yearly)  # linear interpolation height_ini <- 19.1 height_l <- approx_standprop(x_yrs=years,                              y = height_yearly,                              y_ini = height_ini,                              approx.method = 'linear')  # use growthperiod height_l_gp <- approx_standprop(x_yrs = years,                                 y = height_yearly,                                 y_ini = height_ini,                                 use_growthperiod = TRUE,                                 startdoy = 121,                                 enddoy = 279,                                 approx.method = 'linear')  dates <- seq.Date(from = as.Date(paste0(min(years),\"-01-01\")),                   to = as.Date(paste0(max(years),\"-12-31\")),                   by = \"day\") plot(dates, height_c,      type = \"l\", lwd = 2, col = \"black\",      ylim = c(19,22), ylab = \"height [m]\", xlab = \"\", xpd = TRUE) lines(dates, height_l,       col = \"blue\", lwd = 2) lines(dates, height_l_gp,       col = \"green\", lwd = 2) legend(\"topleft\", legend = c(\"'constant'\", \"'linear'\",                              \"'linear', 'use_growthperiod'\"),        col  = c(\"black\", \"blue\", \"green\"),  lwd = 2, pch = NULL,        bty = \"n\")"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/calc_globrad.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate global solar radiation from sunshine duration hours — calc_globrad","title":"Calculate global solar radiation from sunshine duration hours — calc_globrad","text":"Uses functions taken 'sirad' package determine astronomical daylength extraterrestrial radiation, global radiation calculated using Angström-formula.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/calc_globrad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate global solar radiation from sunshine duration hours — calc_globrad","text":"","code":"calc_globrad(dates, sunhours, lat, a0 = 0.25, b0 = 0.5, full_output = FALSE)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/calc_globrad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate global solar radiation from sunshine duration hours — calc_globrad","text":"dates Date vector sunhours Vector sunshine duration hours, length dates. lat Latitude decimal degrees. a0 Angström parameter , defaults 0.25. b0 Angström parameter b, defaults 0.5. full_output Return extraterrestrial radiation daylength along global radiation?","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/calc_globrad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate global solar radiation from sunshine duration hours — calc_globrad","text":"sequence global radiation MJ/(m² d) length dates,   (full_output = TRUE) data.frame holding day year,   dates, sunhours, daylength, extraterrestrial calculated global   solar radiation. warning generated sunshine duration hours   higher expected daylength specified latitude.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/calc_globrad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate global solar radiation from sunshine duration hours — calc_globrad","text":"","code":"dates <- seq.Date(as.Date(\"2002-01-01\"), as.Date(\"2003-12-31\"), by = 'day') calc_globrad(dates, sunhours = runif(365, 0, 7),lat = 52.8) #>   [1]  2.081501  2.081501  2.467927  2.467927  2.553810  2.553810  1.839109 #>   [8]  1.839109  3.158180  3.158180  4.322021  4.322021  2.039250  2.039250 #>  [15]  3.483562  3.483562  1.945384  1.945384  2.664661  2.664661  4.729045 #>  [22]  4.729045  3.166551  3.166551  2.065368  2.065368  4.169492  4.169492 #>  [29]  2.423345  2.423345  3.570106  3.570106  3.544807  3.544807  4.780907 #>  [36]  4.780907  4.945919  4.945919  4.623416  4.623416  2.021544  2.021544 #>  [43]  4.593240  4.593240  4.923421  4.923421  4.079770  4.079770  3.692598 #>  [50]  3.692598  4.984723  4.984723  5.644671  5.644671  5.545185  5.545185 #>  [57]  3.516180  3.516180  4.125155  4.125155  6.138532  6.138532  4.723388 #>  [64]  4.723388  3.316381  3.316381  3.706630  3.706630  2.799672  2.799672 #>  [71]  3.421695  3.421695  2.946222  2.946222  5.397148  5.397148  5.193651 #>  [78]  5.193651  3.533905  3.533905  4.150489  4.150489  7.037466  7.037466 #>  [85]  6.716181  6.716181  4.247325  4.247325  4.340681  4.340681  3.911774 #>  [92]  3.911774  7.191486  7.191486  6.011316  6.011316  5.628113  5.628113 #>  [99]  4.289713  4.289713  8.168001  8.168001  4.637678  4.637678  6.843619 #> [106]  6.843619  8.306531  8.306531  5.530822  5.530822  4.045849  4.045849 #> [113]  6.922055  6.922055  7.153980  7.153980  6.018452  6.018452  5.521603 #> [120]  5.521603  6.110255  6.110255  4.740921  4.740921  6.748801  6.748801 #> [127]  9.559600  9.559600  6.207166  6.207166  6.624156  6.624156  7.234270 #> [134]  7.234270  4.888915  4.888915  4.949106  4.949106  6.730327  6.730327 #> [141] 10.151914 10.151914  6.966179  6.966179  9.645144  9.645144  7.886862 #> [148]  7.886862 10.604793 10.604793  6.665773  6.665773 10.432410 10.432410 #> [155]  7.711941  7.711941  6.605169  6.605169 11.719833 11.719833  9.728647 #> [162]  9.728647  7.042104  7.042104  9.432487  9.432487  9.266531  9.266531 #> [169]  6.213390  6.213390 11.417313 11.417313 11.324207 11.324207  9.666567 #> [176]  9.666567 12.556877 12.556877  7.702025  7.702025 12.571638 12.571638 #> [183]  9.798268  9.798268  6.957224  6.957224  8.608678  8.608678 11.756860 #> [190] 11.756860  9.630658  9.630658 11.564749 11.564749 10.386311 10.386311 #> [197] 12.389949 12.389949 12.173652 12.173652  9.801004  9.801004 10.727082 #> [204] 10.727082  7.688476  7.688476  9.602546  9.602546  9.459869  9.459869 #> [211] 12.647822 12.647822 10.432360 10.432360 10.813150 10.813150 14.902388 #> [218] 14.902388 12.626525 12.626525 15.779473 15.779473  8.427624  8.427624 #> [225] 15.119725 15.119725 10.454698 10.454698  9.981874  9.981874 11.179231 #> [232] 11.179231 12.424756 12.424756 10.302736 10.302736 12.101378 12.101378 #> [239] 16.360828 16.360828 15.422307 15.422307 10.328810 10.328810 16.879772 #> [246] 16.879772 11.707048 11.707048  9.001195  9.001195 15.908412 15.908412 #> [253] 12.375790 12.375790 16.029606 16.029606 13.435994 13.435994 11.606676 #> [260] 11.606676 13.320280 13.320280 12.918279 12.918279 12.692754 12.692754 #> [267] 14.975597 14.975597 10.795618 10.795618 18.074830 18.074830 15.632764 #> [274] 15.632764 15.593188 15.593188 12.103895 12.103895 11.872275 11.872275 #> [281] 14.462639 14.462639 10.162060 10.162060 11.994133 11.994133 17.751865 #> [288] 17.751865 13.460775 13.460775 11.228469 11.228469 16.639750 16.639750 #> [295] 10.782694 10.782694 14.881851 14.881851 11.654539 11.654539 17.376754 #> [302] 17.376754 13.881630 13.881630 16.069821 16.069821 11.860349 11.860349 #> [309] 10.600495 10.600495 15.939198 15.939198 16.525238 16.525238 17.769588 #> [316] 17.769588 17.054020 17.054020 18.923578 18.923578 16.679224 16.679224 #> [323] 15.279220 15.279220 17.089002 17.089002 12.549818 12.549818 17.643187 #> [330] 17.643187 13.927455 13.927455 15.813355 15.813355 11.415552 11.415552 #> [337] 14.823984 14.823984 12.260077 12.260077 11.203968 11.203968 16.937991 #> [344] 16.937991 16.852672 16.852672 11.255298 11.255298 11.087740 11.087740 #> [351] 16.432641 16.432641 10.686582 10.686582 17.274372 17.274372 14.049477 #> [358] 14.049477 16.312283 16.312283 15.334448 15.334448 11.379984 11.379984 #> [365] 18.681266 18.681266 16.271739 16.271739 17.370901 17.370901 15.668261 #> [372] 15.668261 16.745864 16.745864 18.512190 18.512190 17.486090 17.486090 #> [379] 11.913661 11.913661 18.692798 18.692798 16.184892 16.184892 14.736699 #> [386] 14.736699 17.496297 17.496297 13.976085 13.976085 10.545732 10.545732 #> [393] 16.769639 16.769639 12.590398 12.590398 14.548799 14.548799 12.530333 #> [400] 12.530333 14.278519 14.278519 13.508318 13.508318 11.626764 11.626764 #> [407] 13.640407 13.640407 14.789837 14.789837 12.489019 12.489019 11.857634 #> [414] 11.857634 13.359694 13.359694 10.874870 10.874870 10.679857 10.679857 #> [421] 10.997452 10.997452 14.604375 14.604375 11.832524 11.832524 12.620297 #> [428] 12.620297 16.140836 16.140836 11.441499 11.441499 11.972284 11.972284 #> [435] 15.351667 15.351667  9.992982  9.992982 13.935803 13.935803 12.704079 #> [442] 12.704079 10.604465 10.604465 12.605492 12.605492 10.733404 10.733404 #> [449] 10.015942 10.015942 15.328410 15.328410 11.806406 11.806406 14.681209 #> [456] 14.681209 15.988305 15.988305 13.438362 13.438362 11.771836 11.771836 #> [463]  9.985244  9.985244 12.109865 12.109865 12.963048 12.963048 10.248336 #> [470] 10.248336 10.362537 10.362537  9.571825  9.571825 12.100457 12.100457 #> [477]  9.764300  9.764300 10.149779 10.149779 11.260163 11.260163 10.895933 #> [484] 10.895933  9.567807  9.567807 11.947015 11.947015  7.687141  7.687141 #> [491] 13.511005 13.511005 11.759375 11.759375 10.346917 10.346917 12.975769 #> [498] 12.975769  8.432280  8.432280 11.201704 11.201704  7.302976  7.302976 #> [505]  7.383582  7.383582 10.230932 10.230932  9.024542  9.024542  8.515851 #> [512]  8.515851  6.395280  6.395280  7.006269  7.006269 11.709498 11.709498 #> [519]  6.737069  6.737069 11.128433 11.128433 11.694389 11.694389 10.710336 #> [526] 10.710336  8.124521  8.124521  8.759412  8.759412  6.284338  6.284338 #> [533]  5.710191  5.710191 10.090854 10.090854  9.073331  9.073331  8.421543 #> [540]  8.421543  9.298642  9.298642  8.677740  8.677740  6.952893  6.952893 #> [547]  5.490182  5.490182  8.256216  8.256216  6.723828  6.723828  6.498666 #> [554]  6.498666  4.810155  4.810155  5.476297  5.476297  8.166209  8.166209 #> [561]  9.775771  9.775771  7.219538  7.219538  7.536320  7.536320  9.441182 #> [568]  9.441182  6.847211  6.847211  6.542446  6.542446  8.210697  8.210697 #> [575]  6.332791  6.332791  7.650434  7.650434  6.478263  6.478263  4.860697 #> [582]  4.860697  3.796271  3.796271  6.652096  6.652096  3.810731  3.810731 #> [589]  4.443886  4.443886  6.779827  6.779827  4.708619  4.708619  7.454662 #> [596]  7.454662  3.605016  3.605016  4.258425  4.258425  7.085171  7.085171 #> [603]  3.563177  3.563177  4.241682  4.241682  6.468816  6.468816  5.514342 #> [610]  5.514342  5.523283  5.523283  4.522984  4.522984  6.015873  6.015873 #> [617]  4.390124  4.390124  4.943126  4.943126  3.322686  3.322686  5.726366 #> [624]  5.726366  6.105456  6.105456  3.189482  3.189482  4.575811  4.575811 #> [631]  3.537029  3.537029  4.478482  4.478482  4.795603  4.795603  2.193524 #> [638]  2.193524  2.636720  2.636720  2.258004  2.258004  3.032503  3.032503 #> [645]  2.941141  2.941141  3.608843  3.608843  3.697887  3.697887  3.111572 #> [652]  3.111572  4.455765  4.455765  3.187479  3.187479  1.862898  1.862898 #> [659]  3.216365  3.216365  3.011918  3.011918  2.396100  2.396100  2.052819 #> [666]  2.052819  1.882467  1.882467  2.056852  2.056852  3.278704  3.278704 #> [673]  3.985975  3.985975  3.935067  3.935067  4.144257  4.144257  3.250070 #> [680]  3.250070  2.061863  2.061863  2.304758  2.304758  3.214944  3.214944 #> [687]  2.862697  2.862697  4.006510  4.006510  3.913821  3.913821  3.366698 #> [694]  3.366698  1.986790  1.986790  3.451898  3.451898  2.414853  2.414853 #> [701]  3.721975  3.721975  2.713315  2.713315  3.630453  3.630453  4.096658 #> [708]  4.096658  3.691663  3.691663  3.465277  3.465277  3.917543  3.917543 #> [715]  1.862082  1.862082  4.184727  4.184727  3.010816  3.010816  1.876898 #> [722]  1.876898  1.563580  1.563580  4.166007  4.166007  1.781369  1.781369 #> [729]  2.773606  2.773606"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/calc_vegperiod.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the dates of budburst and beginning of leaf fall — calc_vegperiod","title":"Calculate the dates of budburst and beginning of leaf fall — calc_vegperiod","text":"Wrapper vegperiod","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/calc_vegperiod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the dates of budburst and beginning of leaf fall — calc_vegperiod","text":"","code":"calc_vegperiod(   budburst_method,   leaffall_method,   dates = NULL,   tavg = NULL,   out_yrs = NULL,   budburstdoy.fixed = 121,   leaffalldoy.fixed = 279,   ... )"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/calc_vegperiod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the dates of budburst and beginning of leaf fall — calc_vegperiod","text":"budburst_method name model estimating budburst day year. Either 'fixed' one values accepted 'start.method'-argument function vegperiod. leaffall_method name model estimating day year leaffall begin. Either 'fixed' one values accepted 'end.method'-argument function vegperiod. dates date vector passed vegperiod, ignored leaffall_method budburst_method = 'fixed' tavg vector daily mean air temperature (deg C) passed vegperiod, ignored leaffall_method = 'fixed' budburst_method = 'fixed'. out_yrs integer vector years returned. specified, values years dates returned. budburstdoy.fixed vector values returned budburst_method = 'fixed'. leaffalldoy.fixed vector values returned leaffall_method = 'fixed'. ... additional argument passed vegperiod.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/calc_vegperiod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the dates of budburst and beginning of leaf fall — calc_vegperiod","text":"data.frame columns year, start, end. budburst_method = 'fixed' leaffall_method = 'fixed', start end contain values specified budburstdoy.fixed leaffalldoy.fixed respectively.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/calc_vegperiod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the dates of budburst and beginning of leaf fall — calc_vegperiod","text":"","code":"# fixed budburst and leaffall doy calc_vegperiod(out_yrs = 2001:2010,                budburst_method = \"fixed\",                leaffall_method = \"fixed\",                budburstdoy.fixed = floor(runif(10, 120,130)),                leaffalldoy.fixed = floor(runif(2, 260,280))) #>    year start end #> 1  2001   122 266 #> 2  2002   122 260 #> 3  2003   121 266 #> 4  2004   120 260 #> 5  2005   129 266 #> 6  2006   123 260 #> 7  2007   126 266 #> 8  2008   127 260 #> 9  2009   124 266 #> 10 2010   124 260  # dynamic budburst and leaffall using air temperature data(slb1_meteo)  calc_vegperiod(budburst_method = \"Menzel\",                leaffall_method = \"fixed\",                leaffalldoy.fixed = 280,                dates = slb1_meteo$dates,                tavg = slb1_meteo$tmean,                species = \"Fagus sylvatica\",                est.prev = 3) #>    year start end #> 1  1960   136 280 #> 2  1961   128 280 #> 3  1962   141 280 #> 4  1963   137 280 #> 5  1964   135 280 #> 6  1965   145 280 #> 7  1966   132 280 #> 8  1967   136 280 #> 9  1968   124 280 #> 10 1969   133 280 #> 11 1970   142 280 #> 12 1971   134 280 #> 13 1972   141 280 #> 14 1973   143 280 #> 15 1974   136 280 #> 16 1975   139 280 #> 17 1976   135 280 #> 18 1977   140 280 #> 19 1978   141 280 #> 20 1979   140 280 #> 21 1980   144 280 #> 22 1981   131 280 #> 23 1982   141 280 #> 24 1983   137 280 #> 25 1984   141 280 #> 26 1985   135 280 #> 27 1986   136 280 #> 28 1987   140 280 #> 29 1988   134 280 #> 30 1989   134 280 #> 31 1990   126 280 #> 32 1991   142 280 #> 33 1992   137 280 #> 34 1993   120 280 #> 35 1994   132 280 #> 36 1995   137 280 #> 37 1996   137 280 #> 38 1997   135 280 #> 39 1998   129 280 #> 40 1999   133 280 #> 41 2000   126 280 #> 42 2001   134 280 #> 43 2002   134 280 #> 44 2003   127 280 #> 45 2004   132 280 #> 46 2005   135 280 #> 47 2006   131 280 #> 48 2007   122 280 #> 49 2008   134 280 #> 50 2009   125 280 #> 51 2010   143 280 #> 52 2011   127 280 #> 53 2012   132 280 #> 54 2013   130 280  calc_vegperiod(budburst_method = \"Menzel\",                leaffall_method = \"ETCCDI\",                dates = slb1_meteo$dates,                tavg = slb1_meteo$tmean,                species = \"Quercus robur\",                est.prev = 3) #>    year start end #> 1  1960   137 338 #> 2  1961   125 312 #> 3  1962   146 305 #> 4  1963   138 303 #> 5  1964   138 297 #> 6  1965   145 295 #> 7  1966   131 305 #> 8  1967   137 313 #> 9  1968   129 314 #> 10 1969   135 314 #> 11 1970   148 329 #> 12 1971   136 316 #> 13 1972   143 296 #> 14 1973   147 295 #> 15 1974   136 289 #> 16 1975   141 287 #> 17 1976   139 322 #> 18 1977   141 322 #> 19 1978   139 315 #> 20 1979   145 300 #> 21 1980   148 309 #> 22 1981   131 289 #> 23 1982   143 335 #> 24 1983   138 320 #> 25 1984   146 322 #> 26 1985   138 299 #> 27 1986   138 336 #> 28 1987   143 313 #> 29 1988   136 308 #> 30 1989   134 331 #> 31 1990   124 311 #> 32 1991   140 296 #> 33 1992   136 291 #> 34 1993   122 293 #> 35 1994   132 353 #> 36 1995   138 311 #> 37 1996   140 323 #> 38 1997   135 299 #> 39 1998   127 308 #> 40 1999   132 294 #> 41 2000   127 325 #> 42 2001   135 314 #> 43 2002   133 312 #> 44 2003   128 291 #> 45 2004   130 316 #> 46 2005   134 323 #> 47 2006   133 354 #> 48 2007   122 297 #> 49 2008   136 327 #> 50 2009   127 291 #> 51 2010   143 294 #> 52 2011   127 319 #> 53 2012   132 305 #> 54 2013   135 319"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/correct_prec.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct rain gauge precipitation data for wind and evaporation errors after\nRichter (1995) — correct_prec","title":"Correct rain gauge precipitation data for wind and evaporation errors after\nRichter (1995) — correct_prec","text":"Correct rain gauge precipitation data wind evaporation errors Richter (1995)","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/correct_prec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct rain gauge precipitation data for wind and evaporation errors after\nRichter (1995) — correct_prec","text":"","code":"correct_prec(month, tavg, prec, station.exposure = \"mg\", full_output = FALSE)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/correct_prec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct rain gauge precipitation data for wind and evaporation errors after\nRichter (1995) — correct_prec","text":"month Vector months. tavg Vector air temperature values (deg C). length month. prec Vector measured rainfall vales (mm). length month. station.exposure Situation weather station prec measured: one 'frei', 'lg', 'mg', 'sg' (corresponding full exposure, low protected, moderate protected, strong protected situation). full_output Logical wether return full data set additionally including input data, correction coefficients.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/correct_prec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct rain gauge precipitation data for wind and evaporation errors after\nRichter (1995) — correct_prec","text":"vector corrected rainfall data, (full_output ==   TRUE) data.table containing input objects, month,   precipitation type ('N4So': liquid rain, summer; 'N4Wi' liquid rain,   winter; 'N8' = sleet, 'N7' = snow), correction coefficients epsilon b,   corrected rainfall.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/correct_prec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Correct rain gauge precipitation data for wind and evaporation errors after\nRichter (1995) — correct_prec","text":"Richter, D. (1995) Ergebnisse methodischer Untersuchungen zur Korrektur des systematischen Messfehlers des Hellmann-Niederschlagsmessers. Berichte des Deutschen Wetterdienstes, 194, 93 pp, Offenbach, Germany","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/correct_prec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct rain gauge precipitation data for wind and evaporation errors after\nRichter (1995) — correct_prec","text":"","code":"clim <- slb1_meteo[as.integer(format(slb1_meteo$dates,\"%Y\")) %in% 2001:2005,] clim$month <- as.integer(format(clim$dates, \"%m\"))  prec_meas <- clim$prec correct_prec_frei <- with(clim,                        correct_prec(month, tmean, prec, station.exposure = \"frei\")) correct_prec_lg <- with(clim,                      correct_prec(month, tmean, prec, station.exposure = \"lg\")) correct_prec_mg <- with(clim,                      correct_prec(month, tmean, prec, station.exposure = \"mg\")) correct_prec_sg <- with(clim,                      correct_prec(month, tmean, prec, station.exposure = \"sg\"))  plot(clim$dates, cumsum(correct_prec_frei), type = \"l\", col = \"violet\", xlab = \"dates\", ylab = \"cum. precipitation (mm)\") lines(clim$dates, cumsum(correct_prec_lg), col = \"blue\") lines(clim$dates, cumsum(correct_prec_mg), col = \"green\") lines(clim$dates, cumsum(correct_prec_sg), col = \"red\") lines(clim$dates, cumsum(prec_meas)) legend('bottomright', c('frei', \"lg\", \"mg\", \"sg\"),        col = c(\"violet\", \"blue\", \"green\", \"red\", \"black\"),        lty = 1, pch = NULL )"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/extract_layer_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts values from layer data and organizes layer-wise variables in columns — extract_layer_output","title":"Extracts values from layer data and organizes layer-wise variables in columns — extract_layer_output","text":"Convenience function reorganize soil layer data BELO SWAT wide format, casting variables layer number, using data.table's dcast-function.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/extract_layer_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts values from layer data and organizes layer-wise variables in columns — extract_layer_output","text":"","code":"extract_layer_output(dat, layers = NULL, value_vars = NULL, sep = \"\")"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/extract_layer_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts values from layer data and organizes layer-wise variables in columns — extract_layer_output","text":"dat Data.frame layer data organized rows identified layer number column nl. layers Integer vector addressing layer numbers (nl) extracted dat. supplied, values layers returned. value_vars Character vector containing names value-variables extracted dat. supplied, value_vars guessed. sep Separation character constructig names variable name layer index.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/extract_layer_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts values from layer data and organizes layer-wise variables in columns — extract_layer_output","text":"data.table layers' values variables organized   columns (wide format) names made variable name   layer number.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/extract_layer_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts values from layer data and organizes layer-wise variables in columns — extract_layer_output","text":"","code":"# create a data.frame with monthly values # identifiers: layer number, yr and mo df <- expand.grid(nl = 1:5,                   yr = 2002:2003,                   mo = 1:12) df #>     nl   yr mo #> 1    1 2002  1 #> 2    2 2002  1 #> 3    3 2002  1 #> 4    4 2002  1 #> 5    5 2002  1 #> 6    1 2003  1 #> 7    2 2003  1 #> 8    3 2003  1 #> 9    4 2003  1 #> 10   5 2003  1 #> 11   1 2002  2 #> 12   2 2002  2 #> 13   3 2002  2 #> 14   4 2002  2 #> 15   5 2002  2 #> 16   1 2003  2 #> 17   2 2003  2 #> 18   3 2003  2 #> 19   4 2003  2 #> 20   5 2003  2 #> 21   1 2002  3 #> 22   2 2002  3 #> 23   3 2002  3 #> 24   4 2002  3 #> 25   5 2002  3 #> 26   1 2003  3 #> 27   2 2003  3 #> 28   3 2003  3 #> 29   4 2003  3 #> 30   5 2003  3 #> 31   1 2002  4 #> 32   2 2002  4 #> 33   3 2002  4 #> 34   4 2002  4 #> 35   5 2002  4 #> 36   1 2003  4 #> 37   2 2003  4 #> 38   3 2003  4 #> 39   4 2003  4 #> 40   5 2003  4 #> 41   1 2002  5 #> 42   2 2002  5 #> 43   3 2002  5 #> 44   4 2002  5 #> 45   5 2002  5 #> 46   1 2003  5 #> 47   2 2003  5 #> 48   3 2003  5 #> 49   4 2003  5 #> 50   5 2003  5 #> 51   1 2002  6 #> 52   2 2002  6 #> 53   3 2002  6 #> 54   4 2002  6 #> 55   5 2002  6 #> 56   1 2003  6 #> 57   2 2003  6 #> 58   3 2003  6 #> 59   4 2003  6 #> 60   5 2003  6 #> 61   1 2002  7 #> 62   2 2002  7 #> 63   3 2002  7 #> 64   4 2002  7 #> 65   5 2002  7 #> 66   1 2003  7 #> 67   2 2003  7 #> 68   3 2003  7 #> 69   4 2003  7 #> 70   5 2003  7 #> 71   1 2002  8 #> 72   2 2002  8 #> 73   3 2002  8 #> 74   4 2002  8 #> 75   5 2002  8 #> 76   1 2003  8 #> 77   2 2003  8 #> 78   3 2003  8 #> 79   4 2003  8 #> 80   5 2003  8 #> 81   1 2002  9 #> 82   2 2002  9 #> 83   3 2002  9 #> 84   4 2002  9 #> 85   5 2002  9 #> 86   1 2003  9 #> 87   2 2003  9 #> 88   3 2003  9 #> 89   4 2003  9 #> 90   5 2003  9 #> 91   1 2002 10 #> 92   2 2002 10 #> 93   3 2002 10 #> 94   4 2002 10 #> 95   5 2002 10 #> 96   1 2003 10 #> 97   2 2003 10 #> 98   3 2003 10 #> 99   4 2003 10 #> 100  5 2003 10 #> 101  1 2002 11 #> 102  2 2002 11 #> 103  3 2002 11 #> 104  4 2002 11 #> 105  5 2002 11 #> 106  1 2003 11 #> 107  2 2003 11 #> 108  3 2003 11 #> 109  4 2003 11 #> 110  5 2003 11 #> 111  1 2002 12 #> 112  2 2002 12 #> 113  3 2002 12 #> 114  4 2002 12 #> 115  5 2002 12 #> 116  1 2003 12 #> 117  2 2003 12 #> 118  3 2003 12 #> 119  4 2003 12 #> 120  5 2003 12 #add a value variable df$var <- runif(nrow(df), -1,0)  extract_layer_output(df) #>       yr mo         var1        var2        var3        var4        var5 #>  1: 2002  1 -0.243331859 -0.48958732 -0.65363509 -0.56015395 -0.44192878 #>  2: 2002  2 -0.438372679 -0.06317285 -0.04641969 -0.67922531 -0.81349278 #>  3: 2002  3 -0.230392701 -0.62014515 -0.75518159 -0.74101617 -0.66662035 #>  4: 2002  4 -0.021260290 -0.74006486 -0.54133867 -0.88668079 -0.59308125 #>  5: 2002  5 -0.319293582 -0.01638061 -0.09943052 -0.60281740 -0.47824600 #>  6: 2002  6 -0.271970459 -0.59983649 -0.86862829 -0.86948155 -0.64790075 #>  7: 2002  7 -0.164681837 -0.06115361 -0.40061261 -0.81508869 -0.83360991 #>  8: 2002  8 -0.990357647 -0.04438513 -0.35812028 -0.74284171 -0.63087244 #>  9: 2002  9 -0.009689041 -0.53061454 -0.27270228 -0.46639095 -0.07244091 #> 10: 2002 10 -0.621708035 -0.27741446 -0.56894716 -0.83618156 -0.78654695 #> 11: 2002 11 -0.102111101 -0.45569973 -0.07846749 -0.05427461 -0.04674087 #> 12: 2002 12 -0.395180358 -0.59556418 -0.02142390 -0.70101393 -0.28726770 #> 13: 2003  1 -0.829068860 -0.24810032 -0.32697237 -0.47778566 -0.75555701 #> 14: 2003  2 -0.191709620 -0.62522960 -0.58897053 -0.95867230 -0.11496167 #> 15: 2003  3 -0.551141095 -0.27839108 -0.89818762 -0.11441560 -0.15582517 #> 16: 2003  4 -0.538265174 -0.76962255 -0.65007792 -0.96089330 -0.92093032 #> 17: 2003  5 -0.497818080 -0.82604271 -0.25825769 -0.93830506 -0.29840919 #> 18: 2003  6 -0.371448783 -0.48551508 -0.52611850 -0.16714467 -0.20277695 #> 19: 2003  7 -0.792524689 -0.26611052 -0.48905519 -0.56785742 -0.66028709 #> 20: 2003  8 -0.713809568 -0.37719029 -0.67154591 -0.90632593 -0.68492677 #> 21: 2003  9 -0.301510160 -0.38525595 -0.15722781 -0.29366713 -0.30703779 #> 22: 2003 10 -0.740963046 -0.67125592 -0.80969026 -0.11409127 -0.64306289 #> 23: 2003 11 -0.732674474 -0.05540308 -0.31371902 -0.07513979 -0.73054161 #> 24: 2003 12 -0.910924197 -0.40925822 -0.88798295 -0.44452784 -0.55113969 #>       yr mo         var1        var2        var3        var4        var5  # add more variables df$var1 <- runif(nrow(df), 1,2) df$var2 <- runif(nrow(df), 2,3)  # extract specific layers extract_layer_output(df,layers = 2:4, sep = \"_\") #>       yr mo       var_2       var_3       var_4   var1_2   var1_3   var1_4 #>  1: 2002  1 -0.48958732 -0.65363509 -0.56015395 1.992725 1.898619 1.276535 #>  2: 2002  2 -0.06317285 -0.04641969 -0.67922531 1.540241 1.410586 1.703964 #>  3: 2002  3 -0.62014515 -0.75518159 -0.74101617 1.401946 1.882720 1.330390 #>  4: 2002  4 -0.74006486 -0.54133867 -0.88668079 1.677714 1.857649 1.621806 #>  5: 2002  5 -0.01638061 -0.09943052 -0.60281740 1.024563 1.479387 1.395754 #>  6: 2002  6 -0.59983649 -0.86862829 -0.86948155 1.363209 1.770790 1.773004 #>  7: 2002  7 -0.06115361 -0.40061261 -0.81508869 1.575870 1.852304 1.263989 #>  8: 2002  8 -0.04438513 -0.35812028 -0.74284171 1.715160 1.735310 1.337777 #>  9: 2002  9 -0.53061454 -0.27270228 -0.46639095 1.038681 1.671862 1.126383 #> 10: 2002 10 -0.27741446 -0.56894716 -0.83618156 1.392441 1.172624 1.008280 #> 11: 2002 11 -0.45569973 -0.07846749 -0.05427461 1.010842 1.533776 1.757230 #> 12: 2002 12 -0.59556418 -0.02142390 -0.70101393 1.765293 1.734969 1.303691 #> 13: 2003  1 -0.24810032 -0.32697237 -0.47778566 1.417057 1.819183 1.706479 #> 14: 2003  2 -0.62522960 -0.58897053 -0.95867230 1.302392 1.831115 1.195964 #> 15: 2003  3 -0.27839108 -0.89818762 -0.11441560 1.150242 1.439591 1.919003 #> 16: 2003  4 -0.76962255 -0.65007792 -0.96089330 1.362625 1.199014 1.111401 #> 17: 2003  5 -0.82604271 -0.25825769 -0.93830506 1.658189 1.293499 1.337033 #> 18: 2003  6 -0.48551508 -0.52611850 -0.16714467 1.008488 1.423004 1.986645 #> 19: 2003  7 -0.26611052 -0.48905519 -0.56785742 1.664063 1.329539 1.927547 #> 20: 2003  8 -0.37719029 -0.67154591 -0.90632593 1.209961 1.458562 1.922416 #> 21: 2003  9 -0.38525595 -0.15722781 -0.29366713 1.603686 1.180378 1.996860 #> 22: 2003 10 -0.67125592 -0.80969026 -0.11409127 1.585206 1.354479 1.772963 #> 23: 2003 11 -0.05540308 -0.31371902 -0.07513979 1.987702 1.624418 1.330343 #> 24: 2003 12 -0.40925822 -0.88798295 -0.44452784 1.548774 1.488554 1.641966 #>       yr mo       var_2       var_3       var_4   var1_2   var1_3   var1_4 #>       var2_2   var2_3   var2_4 #>  1: 2.598227 2.113478 2.347718 #>  2: 2.084351 2.773950 2.014232 #>  3: 2.909508 2.058525 2.759857 #>  4: 2.798273 2.032155 2.075983 #>  5: 2.970301 2.835867 2.855572 #>  6: 2.897173 2.487262 2.094360 #>  7: 2.278247 2.605619 2.297215 #>  8: 2.318390 2.100863 2.866309 #>  9: 2.392503 2.632842 2.197862 #> 10: 2.322433 2.316267 2.033486 #> 11: 2.548403 2.478963 2.258006 #> 12: 2.370746 2.944154 2.625965 #> 13: 2.450882 2.174669 2.055707 #> 14: 2.854040 2.030032 2.291017 #> 15: 2.756335 2.995703 2.219827 #> 16: 2.807108 2.981463 2.783901 #> 17: 2.288905 2.583192 2.795649 #> 18: 2.917944 2.912164 2.014992 #> 19: 2.487654 2.853991 2.096508 #> 20: 2.165203 2.247521 2.177960 #> 21: 2.088270 2.368485 2.340644 #> 22: 2.763280 2.952236 2.555862 #> 23: 2.330023 2.020801 2.087705 #> 24: 2.248931 2.289872 2.945923 #>       var2_2   var2_3   var2_4  #extract specific variables extract_layer_output(df, layers = 2:4, value_vars = c(\"var1\", \"var2\"), sep = \"_\") #>       yr mo   var1_2   var1_3   var1_4   var2_2   var2_3   var2_4 #>  1: 2002  1 1.992725 1.898619 1.276535 2.598227 2.113478 2.347718 #>  2: 2002  2 1.540241 1.410586 1.703964 2.084351 2.773950 2.014232 #>  3: 2002  3 1.401946 1.882720 1.330390 2.909508 2.058525 2.759857 #>  4: 2002  4 1.677714 1.857649 1.621806 2.798273 2.032155 2.075983 #>  5: 2002  5 1.024563 1.479387 1.395754 2.970301 2.835867 2.855572 #>  6: 2002  6 1.363209 1.770790 1.773004 2.897173 2.487262 2.094360 #>  7: 2002  7 1.575870 1.852304 1.263989 2.278247 2.605619 2.297215 #>  8: 2002  8 1.715160 1.735310 1.337777 2.318390 2.100863 2.866309 #>  9: 2002  9 1.038681 1.671862 1.126383 2.392503 2.632842 2.197862 #> 10: 2002 10 1.392441 1.172624 1.008280 2.322433 2.316267 2.033486 #> 11: 2002 11 1.010842 1.533776 1.757230 2.548403 2.478963 2.258006 #> 12: 2002 12 1.765293 1.734969 1.303691 2.370746 2.944154 2.625965 #> 13: 2003  1 1.417057 1.819183 1.706479 2.450882 2.174669 2.055707 #> 14: 2003  2 1.302392 1.831115 1.195964 2.854040 2.030032 2.291017 #> 15: 2003  3 1.150242 1.439591 1.919003 2.756335 2.995703 2.219827 #> 16: 2003  4 1.362625 1.199014 1.111401 2.807108 2.981463 2.783901 #> 17: 2003  5 1.658189 1.293499 1.337033 2.288905 2.583192 2.795649 #> 18: 2003  6 1.008488 1.423004 1.986645 2.917944 2.912164 2.014992 #> 19: 2003  7 1.664063 1.329539 1.927547 2.487654 2.853991 2.096508 #> 20: 2003  8 1.209961 1.458562 1.922416 2.165203 2.247521 2.177960 #> 21: 2003  9 1.603686 1.180378 1.996860 2.088270 2.368485 2.340644 #> 22: 2003 10 1.585206 1.354479 1.772963 2.763280 2.952236 2.555862 #> 23: 2003 11 1.987702 1.624418 1.330343 2.330023 2.020801 2.087705 #> 24: 2003 12 1.548774 1.488554 1.641966 2.248931 2.289872 2.945923 #>       yr mo   var1_2   var1_3   var1_4   var2_2   var2_3   var2_4"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_rootden.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a root density depth function for soil layers — make_rootden","title":"Generates a root density depth function for soil layers — make_rootden","text":"Generates root density depth function soil layers","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_rootden.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a root density depth function for soil layers — make_rootden","text":"","code":"make_rootden(   soilnodes,   maxrootdepth = min(soilnodes),   method = \"betamodel\",   beta = 0.97,   rootdat = NULL )"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_rootden.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a root density depth function for soil layers — make_rootden","text":"soilnodes Vector soil layer depth limits (including top bottom profile) relative root distribution calculated (m, negative downwards). maxrootdepth maximum rooting depth (m, negative downwards) relative root length density set zero (applying method = 'table'). method Method name root depth distribution. Possible values 'betamodel', 'table', 'linear', 'constant'. See details. beta Parameter root distribution function. rootdat data.frame given root depth density distribution. Columns depth limits ('upper' 'lower' m, negative downwards) relative root densities fine absorbing roots ('rootden') per unit stonefree volume. used method = 'table'.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_rootden.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a root density depth function for soil layers — make_rootden","text":"Vector relative root length densities soil layers framed   soilnodes. Length one less length(soilnodes).","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_rootden.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generates a root density depth function for soil layers — make_rootden","text":"method = 'betamodel' calculates relative root length   densities soil layers cumulative proportion roots   derived model Gale & Grigal (1987). method = 'table'   distributes relative root densities provided rootdat   soil layers, preservation total root mass. method =   'linear' returns linearly decreasing root densities value 1   top soil profile 0 maxrootdepth. method =   'constant' returns uniform root distribution relative root length   density 1 soil layers 'maxrootdepth'.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_rootden.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a root density depth function for soil layers — make_rootden","text":"Gale, M.R. & Grigal D.F. (1987): \"Vertical root distributions northern tree species relation successional status.\" Canadian Journal Forest Research, 17:829-834","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_rootden.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a root density depth function for soil layers — make_rootden","text":"","code":"depths <- c(max(slb1_soil$upper), slb1_soil$lower) roots_beta <- make_rootden(soilnodes = depths,                               maxrootdepth = -1,4,                               beta = 0.97,                               method = \"betamodel\")  rootden_table <- data.frame(   upper = c(0.03,0,-0.02, -0.15, -0.35, -0.5, -0.65,-0.9,-1.1,-1.3),   lower = c(0,-0.02, -0.15, -0.35, -0.5, -0.65,-0.9,-1.1,-1.3,-1.6),   rootden = c(10,15, 35, 15, 7.5, 4, 12, 2, 2, 0))  roots_table <- make_rootden(soilnodes = depths,                                method = \"table\",                                rootdat = rootden_table)  roots_linear <- make_rootden(soilnodes = depths,                                 maxrootdepth = -1.4,                                 method = 'linear')  roots_constant <- make_rootden(soilnodes = depths,                                   maxrootdepth = -1.4,                                   method = 'const')  plot(roots_constant, slb1_soil$lower +runif(n=length(slb1_soil$lower), -0.02,0.02),      type = 's', lwd = 1.5,ylab = \"soil depth [m]\",xlab = \"relative root density\",      xlim = c(0,1), col = \"red\")  lines(roots_linear, slb1_soil$lower,       type = 's', col = \"blue\", lwd = 1.5)  lines(roots_beta*10, slb1_soil$lower, type = 's', col = \"brown\", lwd = 1.5)  lines(roots_table/100, slb1_soil$lower,       type = 's', col = \"green\", lwd = 1.5)   legend(\"bottomright\", c(\"'betamodel'\",\"'table'\",\"'linear'\", \"'constant'\"),seg.len = 1.5,        pch = NULL, lwd =1.5, col = c(\"brown\", \"green\", \"blue\", \"red\"), bty = \"n\")"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_seasLAI.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the seasonal course of leaf area index from parameters — make_seasLAI","title":"Construct the seasonal course of leaf area index from parameters — make_seasLAI","text":"daily sequence leaf area index derived maximum minimum values, dates shape parameters using different methods.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_seasLAI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the seasonal course of leaf area index from parameters — make_seasLAI","text":"","code":"make_seasLAI(   method = \"b90\",   year,   maxlai,   winlaifrac = 0,   budburst_doy = 121,   leaffall_doy = 279,   emerge_dur = 28,   leaffall_dur = 58,   shp_optdoy = 220,   shp_budburst = 0.5,   shp_leaffall = 10,   lai_doy = c(1, 121, 150, 280, 320, 365),   lai_frac = c(0, 0, 0.5, 1, 0.5, 0) )"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_seasLAI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the seasonal course of leaf area index from parameters — make_seasLAI","text":"method Name method generating sequence. Must one \"b90\", \"linear\", \"Coupmodel\". year Vector years returned. maxlai Maximum leaf index. winlaifrac Fraction maxlai winter (ignored method = 'linear'). budburst_doy Budburst day year (ignored method = 'linear'). leaffall_doy Day year leaf fall begins (ignored method = 'linear'). emerge_dur Number days budburst maximum leaf area index reached. leaffall_dur Number days minimum leaf index reached. shp_optdoy Day year optimum value reached (required method = \"Coupmodel\"). shp_budburst Shape parameter growth phase (required method = \"Coupmodel\"). shp_leaffall Shape parameter growth cessation (required method = \"Coupmodel\"). lai_doy Integer vector days years. lai_frac Vector values fractional leaf area index corresponding lai_doy (required method = \"linear\").","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_seasLAI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the seasonal course of leaf area index from parameters — make_seasLAI","text":"vector daily lai values covering years specified.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_seasLAI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct the seasonal course of leaf area index from parameters — make_seasLAI","text":"","code":"# Intraannual courses of leaf area index lai_b90 <- make_seasLAI(method = \"b90\",                        year = 2001,                        maxlai = 5,                        winlaifrac = 0,                        budburst_doy = 121,                        leaffall_doy = 280,                        emerge_dur = 15,                        leaffall_dur = 30)  lai_doy <- c(1,110,117,135,175,220,250,290,365) lai_frac <- c(0.1,0.1,0.5,0.7,1.2,1.2,1.0,0.1,0.1) lai_linear <- make_seasLAI(method = \"linear\",                           year = 2001,                           maxlai = 5,                           lai_doy = lai_doy,                           lai_frac = lai_frac)  lai_coupmodel <- make_seasLAI(method = \"Coupmodel\",                              year = 2001,                              maxlai = 5,                              winlaifrac = 0.1,                              budburst_doy = 110,                              leaffall_doy = 280,                              shp_optdoy = 180,                              shp_budburst = 0.5,                              shp_leaffall = 5)  plot(lai_b90, type = \"n\", xlab = \"doy\", ylab = \"lai [m²/m²]\", ylim = c(0,6)) lines(lai_b90, col =\"green\",lwd = 2,) lines(lai_linear, col =\"red\",lwd = 2) lines(lai_coupmodel, col =\"blue\",lwd = 2)   # incorparating between-year variability years <- 2001:2003 lai <- make_seasLAI(method = \"Coupmodel\",                    year = years,                    maxlai = c(4,6,5),                    budburst_doy = c(100,135,121),                    leaffall_doy = 280,                    shp_budburst = c(3,1,0.3),                    shp_leaffall = 3,                    shp_optdoy =c(210,180,240) )  dates <- seq.Date(as.Date(\"2001-01-01\"), as.Date(\"2003-12-31\"), by = \"day\") plot(dates,lai, col = \"green\", ylab = \"lai [m²/m²]\",      type =\"l\", xlab = \"\", lwd = 2)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_standprop.html","id":null,"dir":"Reference","previous_headings":"","what":"Create daily plant characteristics from parameters and options — make_standprop","title":"Create daily plant characteristics from parameters and options — make_standprop","text":"Creates daily sequences 'age', 'height', 'sai', 'densef', 'lai' parameters options using approx_standprop make_seasLAI.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_standprop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create daily plant characteristics from parameters and options — make_standprop","text":"","code":"make_standprop(options_b90, param_b90, out_yrs)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_standprop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create daily plant characteristics from parameters and options — make_standprop","text":"options_b90 list model control options. param_b90 parameter list-object. out_yrs Years values returned.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_standprop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create daily plant characteristics from parameters and options — make_standprop","text":"data.frame containing daily sequences 'age', 'height', 'sai',   'densef', 'lai'.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/make_standprop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create daily plant characteristics from parameters and options — make_standprop","text":"","code":"options_b90 <- set_optionsLWFB90() param_b90 <- set_paramLWFB90()  standprop <- make_standprop(options_b90,                             param_b90,                             out_yrs = 2002:2004) plot(standprop$dates, standprop$lai, type = \"l\")"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/param_to_rlwfbrook90.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a parameter vector for the r_lwfbrook90-function — param_to_rlwfbrook90","title":"Create a parameter vector for the r_lwfbrook90-function — param_to_rlwfbrook90","text":"param vector r_lwfbrook90 created model parameters.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/param_to_rlwfbrook90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a parameter vector for the r_lwfbrook90-function — param_to_rlwfbrook90","text":"","code":"param_to_rlwfbrook90(param_b90, imodel)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/param_to_rlwfbrook90.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a parameter vector for the r_lwfbrook90-function — param_to_rlwfbrook90","text":"param_b90 named list model parameters. imodel Name hydraulic model ('MvG' 'CH')","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/param_to_rlwfbrook90.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a parameter vector for the r_lwfbrook90-function — param_to_rlwfbrook90","text":"numerical vector parameters right order r_lwfbrook90.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_b90.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate plant properties using the 'b90' method. — plant_b90","title":"Interpolate plant properties using the 'b90' method. — plant_b90","text":"Creates daily sequence one year parameters","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_b90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate plant properties using the 'b90' method. — plant_b90","text":"","code":"plant_b90(minval, maxval, doy.incr, incr.dur, doy.decr, decr.dur, maxdoy)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_b90.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate plant properties using the 'b90' method. — plant_b90","text":"minval Minimum value. maxval Maximum value. doy.incr Day year increasing minval maxval begins. incr.dur Duration (number days) since  doy.incr maxval reached. doy.decr Day year decreasing minval begins. decr.dur Duration (number days) since doy.incr minval reached. maxdoy Length year, 366 leap years, 365 normal years.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_b90.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate plant properties using the 'b90' method. — plant_b90","text":"numeric vector length maxdoy.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_b90.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate plant properties using the 'b90' method. — plant_b90","text":"","code":"plot(plant_b90(minval = 0,maxval=1, doy.incr = 121,incr.dur = 28, doy.decr = 280, decr.dur = 50, maxdoy = 365))"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_coupmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate plant properties using the 'Coupmodel' method. — plant_coupmodel","title":"Interpolate plant properties using the 'Coupmodel' method. — plant_coupmodel","text":"Creates daily sequence one year parameters","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_coupmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate plant properties using the 'Coupmodel' method. — plant_coupmodel","text":"","code":"plant_coupmodel(   minval,   maxval,   doy.incr,   doy.max,   doy.min,   shape.incr,   shape.decr,   maxdoy )"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_coupmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate plant properties using the 'Coupmodel' method. — plant_coupmodel","text":"minval Minimum value. maxval Maximum value. doy.incr Day year increasing minval maxval begins. doy.max Day year maxval reached. doy.min Day year minval reached . shape.incr Shape parameter increasing phase. shape.decr Shape parameter decreasing phase. maxdoy Length year, 366 leap years, 365 normal years.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_coupmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate plant properties using the 'Coupmodel' method. — plant_coupmodel","text":"numeric vector length maxdoy.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_coupmodel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Interpolate plant properties using the 'Coupmodel' method. — plant_coupmodel","text":"Jansson, P.-E. & Karlberg, L. (2004): \"Coupled heat mass transfer model soil-plant-atmosphere systems.\" Royal Institute Technolgy, Dept Civil Environmental Engineering Stockholm","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_coupmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate plant properties using the 'Coupmodel' method. — plant_coupmodel","text":"","code":"plot(plant_coupmodel(0,5, 121, 200, 280, 0.3, 3, 365))"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate plant properties using the 'linear' method. — plant_linear","title":"Interpolate plant properties using the 'linear' method. — plant_linear","text":"Creates daily sequence one year doy/value pairs.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate plant properties using the 'linear' method. — plant_linear","text":"","code":"plant_linear(doys, values, maxdoy)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate plant properties using the 'linear' method. — plant_linear","text":"doys Integer vector dates (days year). values Numeric vector values. maxdoy Integer length year, 366 leap years, 365 normal years.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate plant properties using the 'linear' method. — plant_linear","text":"numeric vector length maxdoy.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/plant_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate plant properties using the 'linear' method. — plant_linear","text":"","code":"doys <- c(110,200,250,280) values <-  c(0,0.8,1,0) maxdoy <- 365 plot(plant_linear(doys = doys, values = values, maxdoy = 365))"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/process_outputs_LWFB90.html","id":null,"dir":"Reference","previous_headings":"","what":"Process model outputs from — process_outputs_LWFB90","title":"Process model outputs from — process_outputs_LWFB90","text":"Returns selected groups variables chosen temporal aggregation","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/process_outputs_LWFB90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process model outputs from — process_outputs_LWFB90","text":"","code":"process_outputs_LWFB90(x, selection = set_outputLWFB90(), prec_interval = 1)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/process_outputs_LWFB90.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process model outputs from — process_outputs_LWFB90","text":"x Named list items x$output /x$layer_output (e.g. returned run_LWFB90) selection [7,5]-matrix row column names, flagging desired groups variables specified time intervals (see set_outputLWFB90). prec_interval applied precipitation interval simulation produced x. Default 1.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/process_outputs_LWFB90.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process model outputs from — process_outputs_LWFB90","text":"named list containing selected groups variables   desired temporal resolution. names constructed selection's row names column names, suffixed '.ASC'   reminiscence former text file output LWF-Brook90.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/process_outputs_LWFB90.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process model outputs from — process_outputs_LWFB90","text":"","code":"data(\"slb1_soil\") data(\"slb1_meteo\") opts <- set_optionsLWFB90(startdate = as.Date(\"2002-06-01\"), enddate = as.Date(\"2002-06-05\")) parms <- set_paramLWFB90() soil <- cbind(slb1_soil, hydpar_wessolek_tab(texture = slb1_soil$texture))  outsel <- set_outputLWFB90() outsel[,] <- 1L  res <- run_LWFB90(options_b90 = opts,            param_b90 = parms,            climate = slb1_meteo,            soil = soil)  process_outputs_LWFB90(res, selection = outsel) #> $BUDGPRE.ASC #>      yr mo da doy prec flow evap seep snow  swat gwat intr ints #> 1: 2002  6  1 152  0.0  0.2  2.9    0    0 418.0    0    0    0 #> 2: 2002  6  2 153  0.0  0.2  3.7    0    0 414.1    0    0    0 #> 3: 2002  6  3 154  0.0  0.3  3.6    0    0 410.2    0    0    0 #> 4: 2002  6  4 155  2.9  0.4  4.0    0    0 408.6    0    0    0 #> 5: 2002  6  5 156  2.4  0.6  4.1    0    0 406.3    0    0    0 #>  #> $BUDGDAY.ASC #>      yr mo da doy prec flow evap seep snow  swat gwat intr ints #> 1: 2002  6  1 152  0.0  0.2  2.9    0    0 418.0    0    0    0 #> 2: 2002  6  2 153  0.0  0.2  3.7    0    0 414.1    0    0    0 #> 3: 2002  6  3 154  0.0  0.3  3.6    0    0 410.2    0    0    0 #> 4: 2002  6  4 155  2.9  0.4  4.0    0    0 408.6    0    0    0 #> 5: 2002  6  5 156  2.4  0.6  4.1    0    0 406.3    0    0    0 #>  #> $BUDGMON.ASC #>      yr mo prec flow evap seep snow  swat gwat intr ints #> 1: 2002  6  5.3  1.8 18.3    0    0 418.0    0    0    0 #> 2: 2002  6  5.3  1.8 18.3    0    0 414.1    0    0    0 #> 3: 2002  6  5.3  1.8 18.3    0    0 410.2    0    0    0 #> 4: 2002  6  5.3  1.8 18.3    0    0 408.6    0    0    0 #> 5: 2002  6  5.3  1.8 18.3    0    0 406.3    0    0    0 #>  #> $BUDGANN.ASC #>      yr prec flow evap seep snow  swat gwat intr ints #> 1: 2002  5.3  1.8 18.3    0    0 418.0    0    0    0 #> 2: 2002  5.3  1.8 18.3    0    0 414.1    0    0    0 #> 3: 2002  5.3  1.8 18.3    0    0 410.2    0    0    0 #> 4: 2002  5.3  1.8 18.3    0    0 408.6    0    0    0 #> 5: 2002  5.3  1.8 18.3    0    0 406.3    0    0    0 #>  #> $FLOWPRE.ASC #>      yr mo da doy flow seep srfl slfl byfl dsfl gwfl vrfln #> 1: 2002  6  1 152  0.2    0    0  0.0    0    0  0.2   0.2 #> 2: 2002  6  2 153  0.2    0    0  0.0    0    0  0.2   0.2 #> 3: 2002  6  3 154  0.3    0    0  0.0    0    0  0.3   0.3 #> 4: 2002  6  4 155  0.4    0    0  1.8    0    0  0.4   0.4 #> 5: 2002  6  5 156  0.6    0    0  1.6    0    0  0.6   0.6 #>  #> $FLOWDAY.ASC #>      yr mo da doy flow seep srfl slfl byfl dsfl gwfl vrfln #> 1: 2002  6  1 152  0.2    0    0  0.0    0    0  0.2   0.2 #> 2: 2002  6  2 153  0.2    0    0  0.0    0    0  0.2   0.2 #> 3: 2002  6  3 154  0.3    0    0  0.0    0    0  0.3   0.3 #> 4: 2002  6  4 155  0.4    0    0  1.8    0    0  0.4   0.4 #> 5: 2002  6  5 156  0.6    0    0  1.6    0    0  0.6   0.6 #>  #> $FLOWMON.ASC #>      yr mo flow seep srfl slfl byfl dsfl gwfl vrfln #> 1: 2002  6  1.8    0    0  3.4    0    0  1.8   1.8 #>  #> $FLOWANN.ASC #>      yr flow seep srfl slfl byfl dsfl gwfl vrfln #> 1: 2002  1.8    0    0  3.4    0    0  1.8   1.8 #>  #> $EVAPPRE.ASC #>      yr mo da doy flow evap tran irvp isvp slvp snvp pint ptran pslvp #> 1: 2002  6  1 152  0.2  2.9  2.6  0.0    0  0.3    0  5.1   2.6   0.3 #> 2: 2002  6  2 153  0.2  3.7  3.3  0.0    0  0.4    0  7.6   3.3   0.5 #> 3: 2002  6  3 154  0.3  3.6  3.1  0.0    0  0.5    0  8.8   3.1   0.6 #> 4: 2002  6  4 155  0.4  4.0  2.6  1.0    0  0.3    0  6.1   2.6   0.4 #> 5: 2002  6  5 156  0.6  4.1  2.6  0.9    0  0.6    0 10.4   2.6   0.8 #>  #> $EVAPDAY.ASC #>      yr mo da doy flow evap tran irvp isvp slvp snvp pint ptran pslvp #> 1: 2002  6  1 152  0.2  2.9  2.6  0.0    0  0.3    0  5.1   2.6   0.3 #> 2: 2002  6  2 153  0.2  3.7  3.3  0.0    0  0.4    0  7.6   3.3   0.5 #> 3: 2002  6  3 154  0.3  3.6  3.1  0.0    0  0.5    0  8.8   3.1   0.6 #> 4: 2002  6  4 155  0.4  4.0  2.6  1.0    0  0.3    0  6.1   2.6   0.4 #> 5: 2002  6  5 156  0.6  4.1  2.6  0.9    0  0.6    0 10.4   2.6   0.8 #>  #> $EVAPMON.ASC #>      yr mo flow evap tran irvp isvp slvp snvp pint ptran pslvp #> 1: 2002  6  1.8 18.3 14.2  1.9    0  2.2    0   38  14.2   2.7 #>  #> $EVAPANN.ASC #>      yr flow evap tran irvp isvp slvp snvp pint ptran pslvp #> 1: 2002  1.8 18.3 14.2  1.9    0  2.2    0   38  14.2   2.7 #>  #> $ABOVPRE.ASC #>      yr mo da doy rfal rint sfal sint rthr sthr rsno rnet smlt slfl srfl #> 1: 2002  6  1 152  0.0  0.0    0    0  0.0    0    0  0.0    0  0.0    0 #> 2: 2002  6  2 153  0.0  0.0    0    0  0.0    0    0  0.0    0  0.0    0 #> 3: 2002  6  3 154  0.0  0.0    0    0  0.0    0    0  0.0    0  0.0    0 #> 4: 2002  6  4 155  2.9  1.0    0    0  1.8    0    0  1.8    0  1.8    0 #> 5: 2002  6  5 156  2.4  0.9    0    0  1.6    0    0  1.6    0  1.6    0 #>  #> $ABOVDAY.ASC #>      yr mo da doy rfal rint sfal sint rthr sthr rsno rnet smlt slfl srfl #> 1: 2002  6  1 152  0.0  0.0    0    0  0.0    0    0  0.0    0  0.0    0 #> 2: 2002  6  2 153  0.0  0.0    0    0  0.0    0    0  0.0    0  0.0    0 #> 3: 2002  6  3 154  0.0  0.0    0    0  0.0    0    0  0.0    0  0.0    0 #> 4: 2002  6  4 155  2.9  1.0    0    0  1.8    0    0  1.8    0  1.8    0 #> 5: 2002  6  5 156  2.4  0.9    0    0  1.6    0    0  1.6    0  1.6    0 #>  #> $ABOVMON.ASC #>      yr mo rfal rint sfal sint rthr sthr rsno rnet smlt slfl srfl #> 1: 2002  6  5.3  1.9    0    0  3.4    0    0  3.4    0  3.4    0 #>  #> $ABOVANN.ASC #>      yr rfal rint sfal sint rthr sthr rsno rnet smlt slfl srfl #> 1: 2002  5.3  1.9    0    0  3.4    0    0  3.4    0  3.4    0 #>  #> $BELOPRE.ASC #>        yr mo da doy nl infl byfl tran vrfl dsfl ntfl #>   1: 2002  6  1 152  1    0    0  0.1 -0.2    0 -0.2 #>   2: 2002  6  1 152  2    0    0  0.2  0.0    0 -0.4 #>   3: 2002  6  1 152  3    0    0  0.1  0.3    0 -0.4 #>   4: 2002  6  1 152  4    0    0  0.2  0.6    0 -0.5 #>   5: 2002  6  1 152  5    0    0  0.2  0.9    0 -0.6 #>  ---                                                 #> 101: 2002  6  5 156 17    0    0  0.0  0.8    0 -0.1 #> 102: 2002  6  5 156 18    0    0  0.0  0.8    0  0.0 #> 103: 2002  6  5 156 19    0    0  0.0  0.8    0  0.0 #> 104: 2002  6  5 156 20    0    0  0.0  0.7    0  0.1 #> 105: 2002  6  5 156 21    0    0  0.0  0.6    0  0.1 #>  #> $BELODAY.ASC #>        yr mo da doy nl infl byfl tran vrfl dsfl ntfl #>   1: 2002  6  1 152  1    0    0  0.1 -0.2    0 -0.2 #>   2: 2002  6  1 152  2    0    0  0.2  0.0    0 -0.4 #>   3: 2002  6  1 152  3    0    0  0.1  0.3    0 -0.4 #>   4: 2002  6  1 152  4    0    0  0.2  0.6    0 -0.5 #>   5: 2002  6  1 152  5    0    0  0.2  0.9    0 -0.6 #>  ---                                                 #> 101: 2002  6  5 156 17    0    0  0.0  0.8    0 -0.1 #> 102: 2002  6  5 156 18    0    0  0.0  0.8    0  0.0 #> 103: 2002  6  5 156 19    0    0  0.0  0.8    0  0.0 #> 104: 2002  6  5 156 20    0    0  0.0  0.7    0  0.1 #> 105: 2002  6  5 156 21    0    0  0.0  0.6    0  0.1 #>  #> $BELOMON.ASC #>       yr mo nl da doy infl byfl tran vrfl dsfl ntfl #>  1: 2002  6  1 15 770  3.4    0  0.4  1.1    0 -0.4 #>  2: 2002  6  2 15 770  0.0    0  0.9  0.9    0 -0.7 #>  3: 2002  6  3 15 770  0.0    0  0.8  0.8    0 -0.7 #>  4: 2002  6  4 15 770  0.0    0  1.1  0.8    0 -1.1 #>  5: 2002  6  5 15 770  0.0    0  1.3  0.8    0 -1.4 #>  6: 2002  6  6 15 770  0.0    0  1.2  1.0    0 -1.4 #>  7: 2002  6  7 15 770  0.0    0  1.5  1.4    0 -2.0 #>  8: 2002  6  8 15 770  0.0    0  1.3  2.0    0 -1.9 #>  9: 2002  6  9 15 770  0.0    0  1.4  3.0    0 -2.3 #> 10: 2002  6 10 15 770  0.0    0  1.1  3.9    0 -2.1 #> 11: 2002  6 11 15 770  0.0    0  0.8  4.9    0 -1.8 #> 12: 2002  6 12 15 770  0.0    0  0.7  5.8    0 -1.5 #> 13: 2002  6 13 15 770  0.0    0  0.5  6.7    0 -1.4 #> 14: 2002  6 14 15 770  0.0    0  0.5  7.6    0 -1.4 #> 15: 2002  6 15 15 770  0.0    0  0.3  7.7    0 -0.4 #> 16: 2002  6 16 15 770  0.0    0  0.2  7.0    0  0.5 #> 17: 2002  6 17 15 770  0.0    0  0.1  4.9    0  2.0 #> 18: 2002  6 18 15 770  0.0    0  0.0  3.9    0  1.0 #> 19: 2002  6 19 15 770  0.0    0  0.0  3.1    0  0.7 #> 20: 2002  6 20 15 770  0.0    0  0.0  2.4    0  0.7 #> 21: 2002  6 21 15 770  0.0    0  0.0  1.8    0  0.7 #>       yr mo nl da doy infl byfl tran vrfl dsfl ntfl #>  #> $BELOANN.ASC #>       yr nl mo da doy infl byfl tran vrfl dsfl ntfl #>  1: 2002  1 30 15 770  3.4    0  0.4  1.1    0 -0.4 #>  2: 2002  2 30 15 770  0.0    0  0.9  0.9    0 -0.7 #>  3: 2002  3 30 15 770  0.0    0  0.8  0.8    0 -0.7 #>  4: 2002  4 30 15 770  0.0    0  1.1  0.8    0 -1.1 #>  5: 2002  5 30 15 770  0.0    0  1.3  0.8    0 -1.4 #>  6: 2002  6 30 15 770  0.0    0  1.2  1.0    0 -1.4 #>  7: 2002  7 30 15 770  0.0    0  1.5  1.4    0 -2.0 #>  8: 2002  8 30 15 770  0.0    0  1.3  2.0    0 -1.9 #>  9: 2002  9 30 15 770  0.0    0  1.4  3.0    0 -2.3 #> 10: 2002 10 30 15 770  0.0    0  1.1  3.9    0 -2.1 #> 11: 2002 11 30 15 770  0.0    0  0.8  4.9    0 -1.8 #> 12: 2002 12 30 15 770  0.0    0  0.7  5.8    0 -1.5 #> 13: 2002 13 30 15 770  0.0    0  0.5  6.7    0 -1.4 #> 14: 2002 14 30 15 770  0.0    0  0.5  7.6    0 -1.4 #> 15: 2002 15 30 15 770  0.0    0  0.3  7.7    0 -0.4 #> 16: 2002 16 30 15 770  0.0    0  0.2  7.0    0  0.5 #> 17: 2002 17 30 15 770  0.0    0  0.1  4.9    0  2.0 #> 18: 2002 18 30 15 770  0.0    0  0.0  3.9    0  1.0 #> 19: 2002 19 30 15 770  0.0    0  0.0  3.1    0  0.7 #> 20: 2002 20 30 15 770  0.0    0  0.0  2.4    0  0.7 #> 21: 2002 21 30 15 770  0.0    0  0.0  1.8    0  0.7 #>       yr nl mo da doy infl byfl tran vrfl dsfl ntfl #>  #> $SWATPRE.ASC #>        yr mo da doy nl  swati theta wetnes   psimi #>   1: 2002  6  1 152  1  3.219 0.335  0.830 -10.282 #>   2: 2002  6  1 152  2  6.449 0.336  0.831 -10.142 #>   3: 2002  6  1 152  3  6.470 0.337  0.834  -9.899 #>   4: 2002  6  1 152  4  9.740 0.338  0.837  -9.637 #>   5: 2002  6  1 152  5 13.050 0.340  0.841  -9.284 #>  ---                                               #> 101: 2002  6  5 156 17 44.084 0.356  0.888  -4.163 #> 102: 2002  6  5 156 18 13.024 0.372  0.772  -3.120 #> 103: 2002  6  5 156 19  7.037 0.352  0.830  -2.545 #> 104: 2002  6  5 156 20  7.004 0.350  0.825  -2.658 #> 105: 2002  6  5 156 21  6.957 0.348  0.818  -2.823 #>  #> $SWATDAY.ASC #>        yr mo da doy nl  swati theta wetnes   psimi #>   1: 2002  6  1 152  1  3.219 0.335  0.830 -10.282 #>   2: 2002  6  1 152  2  6.449 0.336  0.831 -10.142 #>   3: 2002  6  1 152  3  6.470 0.337  0.834  -9.899 #>   4: 2002  6  1 152  4  9.740 0.338  0.837  -9.637 #>   5: 2002  6  1 152  5 13.050 0.340  0.841  -9.284 #>  ---                                               #> 101: 2002  6  5 156 17 44.084 0.356  0.888  -4.163 #> 102: 2002  6  5 156 18 13.024 0.372  0.772  -3.120 #> 103: 2002  6  5 156 19  7.037 0.352  0.830  -2.545 #> 104: 2002  6  5 156 20  7.004 0.350  0.825  -2.658 #> 105: 2002  6  5 156 21  6.957 0.348  0.818  -2.823 #>  #> $SWATMON.ASC #>       yr mo nl  swati theta wetnes   psimi #>  1: 2002  6  1  3.102 0.323  0.799 -13.436 #>  2: 2002  6  2  6.211 0.323  0.800 -13.352 #>  3: 2002  6  3  6.223 0.324  0.801 -13.176 #>  4: 2002  6  4  9.357 0.325  0.803 -12.969 #>  5: 2002  6  5 12.523 0.326  0.806 -12.652 #>  6: 2002  6  6 12.580 0.328  0.810 -12.270 #>  7: 2002  6  7 18.982 0.330  0.815 -11.779 #>  8: 2002  6  8 19.120 0.332  0.821 -11.188 #>  9: 2002  6  9 25.709 0.335  0.828 -10.519 #> 10: 2002  6 10 25.948 0.338  0.836  -9.806 #> 11: 2002  6 11 26.176 0.341  0.843  -9.156 #> 12: 2002  6 12 26.392 0.344  0.851  -8.564 #> 13: 2002  6 13 27.021 0.330  0.823  -7.961 #> 14: 2002  6 14 41.061 0.334  0.834  -7.200 #> 15: 2002  6 15 31.487 0.339  0.846  -6.429 #> 16: 2002  6 16 42.672 0.344  0.860  -5.614 #> 17: 2002  6 17 43.824 0.353  0.883  -4.421 #> 18: 2002  6 18 12.847 0.367  0.754  -3.573 #> 19: 2002  6 19  6.866 0.343  0.804  -3.240 #> 20: 2002  6 20  6.728 0.336  0.784  -3.887 #> 21: 2002  6 21  6.626 0.331  0.769  -4.405 #>       yr mo nl  swati theta wetnes   psimi #>  #> $SWATANN.ASC #>       yr nl  swati theta wetnes   psimi #>  1: 2002  1  3.102 0.323  0.799 -13.436 #>  2: 2002  2  6.211 0.323  0.800 -13.352 #>  3: 2002  3  6.223 0.324  0.801 -13.176 #>  4: 2002  4  9.357 0.325  0.803 -12.969 #>  5: 2002  5 12.523 0.326  0.806 -12.652 #>  6: 2002  6 12.580 0.328  0.810 -12.270 #>  7: 2002  7 18.982 0.330  0.815 -11.779 #>  8: 2002  8 19.120 0.332  0.821 -11.188 #>  9: 2002  9 25.709 0.335  0.828 -10.519 #> 10: 2002 10 25.948 0.338  0.836  -9.806 #> 11: 2002 11 26.176 0.341  0.843  -9.156 #> 12: 2002 12 26.392 0.344  0.851  -8.564 #> 13: 2002 13 27.021 0.330  0.823  -7.961 #> 14: 2002 14 41.061 0.334  0.834  -7.200 #> 15: 2002 15 31.487 0.339  0.846  -6.429 #> 16: 2002 16 42.672 0.344  0.860  -5.614 #> 17: 2002 17 43.824 0.353  0.883  -4.421 #> 18: 2002 18 12.847 0.367  0.754  -3.573 #> 19: 2002 19  6.866 0.343  0.804  -3.240 #> 20: 2002 20  6.728 0.336  0.784  -3.887 #> 21: 2002 21  6.626 0.331  0.769  -4.405 #>       yr nl  swati theta wetnes   psimi #>  #> $MISCPRE.ASC #>      yr mo da doy pint vrfln safrac  adef  awat relawat nits #> 1: 2002  6  1 152    1   0.2      0 0.045 254.8   0.983  233 #> 2: 2002  6  2 153    1   0.2      0 0.048 250.4   0.966  168 #> 3: 2002  6  3 154    1   0.3      0 0.051 245.9   0.949  134 #> 4: 2002  6  4 155    1   0.4      0 0.052 243.9   0.941  105 #> 5: 2002  6  5 156    1   0.6      0 0.054 241.4   0.931   81 #>  #> $MISCDAY.ASC #>      yr mo da doy vrfln safrac stres  adef  awat relawat nits balerr #> 1: 2002  6  1 152   0.2      0     1 0.045 254.8   0.983  233      0 #> 2: 2002  6  2 153   0.2      0     1 0.048 250.4   0.966  168      0 #> 3: 2002  6  3 154   0.3      0     1 0.051 245.9   0.949  134      0 #> 4: 2002  6  4 155   0.4      0     1 0.052 243.9   0.941  105      0 #> 5: 2002  6  5 156   0.6      0     1 0.054 241.4   0.931   81      0 #>  #> $MISCMON.ASC #>      yr mo vrfln safrac stres adef  awat relawat nits balerr #> 1: 2002  6   1.8      0     1 0.05 247.3   0.954  721      0 #>"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/ptfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to derive soil hydraulic properties from soil properties — ptfs","title":"Functions to derive soil hydraulic properties from soil properties — ptfs","text":"set pedotransfer functions deriving Mualem - van Genuchten parameters soil physical properties soil horizons, soil texture, bulk density carbon content.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/ptfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to derive soil hydraulic properties from soil properties — ptfs","text":"","code":"hydpar_puh2(clay, silt, sand, bd, oc.pct = 0.5)  hydpar_hypres(clay, silt, bd, oc.pct = 0.1, topsoil = TRUE, humconv = 1.72)  hydpar_hypres_tab(texture, topsoil)  hydpar_wessolek_tab(texture)  hydpar_ff_b90(n = 1)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/ptfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to derive soil hydraulic properties from soil properties — ptfs","text":"clay, silt, sand Numeric vectors clay, silt, sand mass %. Particle size ranges clay, silt sand correspond <2, 2-63, 63-2000 \\(\\mu m\\). hydpar_hypres, particle size limit silt sand 50 \\(\\mu m\\). bd Numeric vector bulk density g cm-3. oc.pct Numeric vector organic carbon content mass %. topsoil Logical: sample topsoil? Used hydpar_hypres_tab. humconv Conversion factor oc.pct organic matter percent. Default: 1.72. hydpar_hypres_tab. texture Character vector soil texture classes. hydpar_wessolek_tab classes according KA5 (AG Boden 2005) provided. using hydpar_hypres_tab, texture classes according FAO (1990) provided. n integer value specifying number rows returned data.frame (.e. number repetitions MvG-Parameter set, hydpar_ff_hamken).","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/ptfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to derive soil hydraulic properties from soil properties — ptfs","text":"data.frame following variables: ths Saturation water content fraction thr Residual water   content fraction npar N parameter van Genuchten water   retention function mpar M parameter van Genuchten water   retention function alpha Alpha parameter van Genuchten water   retention function (1/m) ksat Saturated hyraulic conductivity   parameter Mualem hydraulic conductivity function (mm/d) tort Tortuosity parameter Mualem hydraulic conductivity function","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/ptfs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to derive soil hydraulic properties from soil properties — ptfs","text":"Function hydpar_puh2 derives Mualem - van Genuchten (MvG) parameters using regression functions developed Puhlmann & von Wilpert (2011). equations Wösten et al. (1999) available via hydpar_hypres, tabulated values soil texture classes can derived using function hydpar_hypres_tab. table MvG parameters Wesselok et al. (2009; Tab. 10) accessible hydpar_wessolek_tab. function, soil texture classes German texture classification system (KA5, AG Boden 2005) provided. derive hydraulic parameters forest floor horizons, function hydpar_ff_b90 can used. returns single MvG parameter set forest floor horizons reported Hammel & Kennel (2001) original LWF-Brook90 publication.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/ptfs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Functions to derive soil hydraulic properties from soil properties — ptfs","text":"AG Boden (2005) Bodenkundliche Kartieranleitung Schweizerbart'sche Verlagsbuchhandlung, Stuttgart Food Agriculture Organisation (FAO) (1990) Guidelines soil description FAO/ISRIC, Rome, 3rd edition Hammel K & Kennel M (2001) Charakterisierung und Analyse der Wasserverfügbarkeit und des Wasserhaushalts von Waldstandorten Bayern mit dem Simulationsmodell BROOK90. Forstliche Forschungsberichte München 185 Puhlmann H, von Wilpert K (2011) Testing development pedotransfer functions water retention hydraulic conductivity forest soils. Waldökologie, Landschaftsforschung und Naturschutz 12, pp. 61-71 Wessolek G, Kaupenjohann M Renger H (2009) Bodenphysikalische Kennwerte und Berechnungsverfahren für die Praxis. Bodenökologie und Bodengenese 40, Berlin, Germany Woesten JHM, Lilly , Nemes , Le Bas C  (1999) Development use database hydraulic properties European soils. Geoderma 90, pp. 169-185","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/ptfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to derive soil hydraulic properties from soil properties — ptfs","text":"","code":"hydpar_puh2(clay = c(10,20), silt = c(40,20), sand = c(50,60), bd = c(1.6, 1.4)) #>         ths   thr    alpha     npar      mpar      ksat       tort #> 1 0.3700561 0.069 2.063483 1.245316 0.1969907  35.34026 -0.1221964 #> 2 0.3992240 0.069 8.156158 1.278638 0.2179176 108.53398 -1.4644501  hydpar_hypres(20,20,1.5,2) #>        ths thr    alpha     npar      mpar     ksat     tort #> 1 0.394632   0 5.462451 1.181339 0.1535029 364.6788 -3.61904  hydpar_hypres_tab(texture = c(\"C\",\"MF\"), topsoil = c(TRUE,FALSE)) #>     ths   thr alpha  npar  mpar ksat tort #> 1 0.403 0.025  3.83 1.377 0.274  600 1.25 #> 2 0.412 0.010  0.82 1.218 0.179   40 0.50  hydpar_wessolek_tab(c(\"Us\", \"Ls2\", \"mSfS\")) #>      ths    thr alpha    npar      mpar   ksat   tort #> 2 0.3946 0.0000 2.747 1.22393 0.1829598 355.26 -2.728 #> 1 0.4148 0.1406 4.052 1.32416 0.2448043 384.30 -2.067 #> 3     NA     NA    NA      NA        NA     NA     NA  hydpar_ff_b90(n = 5) #>       ths thr alpha  npar      mpar  ksat tort #> 1   0.848   0    98 1.191 0.1603694 98000  0.5 #> 1.1 0.848   0    98 1.191 0.1603694 98000  0.5 #> 1.2 0.848   0    98 1.191 0.1603694 98000  0.5 #> 1.3 0.848   0    98 1.191 0.1603694 98000  0.5 #> 1.4 0.848   0    98 1.191 0.1603694 98000  0.5"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/r_lwfbrook90.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface function to the LWF-Brook90 model — r_lwfbrook90","title":"Interface function to the LWF-Brook90 model — r_lwfbrook90","text":"Passes input data matrices Fortran model code returns results","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/r_lwfbrook90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface function to the LWF-Brook90 model — r_lwfbrook90","text":"","code":"r_lwfbrook90(   siteparam,   climveg,   param,   pdur,   soil_materials,   soil_nodes,   precdat = NULL,   output_log = TRUE,   timelimit = Inf )"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/r_lwfbrook90.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface function to the LWF-Brook90 model — r_lwfbrook90","text":"siteparam [1,6] matrix site level information: start year, start doy, latitude, initial snow, initial groundwater, precipitation interval. climveg matrix 15 columns climatic vegetation data: year, month, day, global radiation MJ/(m² d), tmax (deg C), tmin (deg C), vappres (kPa), wind (m/s), prec (mm), mesfl (mm), densef (-), stand height (m), lai (m²/m²), sai (m²/m²), stand age (years). param numeric vector model input parameters (right order see param_to_rlwfbrook90). pdur [1,12]-matrix precipitation durations (hours) month. soil_materials matrix 8 soil materials parameters. imodel = 1 (Mualem-van Genuchten), refer : mat, ths, thr, alpha (1/m), npar, ksat (mm/d), tort (-), stonef (-). imodel = 2 (Clapp-Hornberger): mat, thsat, thetaf, psif (kPa), bexp, kf (mm/d), wetinf (-), stonef (-). soil_nodes matrix soil model layers columns nl (layer number), layer midpoint (m), thickness (mm), mat, psiini (kPa), rootden (-). precdat matrix precipitation interval data 6 columns: year, month, day, interval-number (1:precint), prec, mesflp. output_log Logical whether print runtime output console. timelimit Integer set elapsed time limits running model.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/r_lwfbrook90.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface function to the LWF-Brook90 model — r_lwfbrook90","text":"list containing daily soil layer model outputs, along   error code simulation (see run_LWFB90.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/replace_vecelements.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace elements in a data.frame or vector of length > 1 by name — replace_vecelements","title":"Replace elements in a data.frame or vector of length > 1 by name — replace_vecelements","text":"Replace elements data.frame vector length > 1 name","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/replace_vecelements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace elements in a data.frame or vector of length > 1 by name — replace_vecelements","text":"","code":"replace_vecelements(x, varnms, vals)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/replace_vecelements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace elements in a data.frame or vector of length > 1 by name — replace_vecelements","text":"x vector data.frame. varnms Variable names match: Specify position name index. vals Vector values insert specified positions.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/replace_vecelements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace elements in a data.frame or vector of length > 1 by name — replace_vecelements","text":"vector data.frame x elements 'varnms' replaced   vals.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/replace_vecelements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace elements in a data.frame or vector of length > 1 by name — replace_vecelements","text":"","code":"soil_materials <- data.frame(ths = rep(0.4,3), alpha = rep(23.1, 3))  varnms = c(\"soil_materials.ths3\", \"soil_materials.ths1\", \"soil_materials.alpha2\") vals = c(0.999, 0.001, 99) soil_materials #>   ths alpha #> 1 0.4  23.1 #> 2 0.4  23.1 #> 3 0.4  23.1 replace_vecelements(soil_materials, varnms, vals) #>   alpha   ths #> 1  23.1 0.001 #> 2  99.0 0.400 #> 3  23.1 0.999  x <- set_paramLWFB90()[[\"pdur\"]] varnms <- c(\"pdur2\", \"pdur12\") vals <- c(0,10) x #>  [1] 4 4 4 4 4 4 4 4 4 4 4 4 replace_vecelements(x, varnms, vals) #>  [1]  4  0  4  4  4  4  4  4  4  4  4 10"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_LWFB90.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the LWF-Brook90 hydrologic model — run_LWFB90","title":"Run the LWF-Brook90 hydrologic model — run_LWFB90","text":"Sets input objects LWF-Brook90 hydrologic model, starts model, returns selected results.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_LWFB90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the LWF-Brook90 hydrologic model — run_LWFB90","text":"","code":"run_LWFB90(   options_b90,   param_b90,   climate,   precip = NULL,   soil = NULL,   output_fun = NULL,   rtrn_input = TRUE,   rtrn_output = TRUE,   chk_input = TRUE,   run = TRUE,   timelimit = Inf,   verbose = FALSE,   ... )"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_LWFB90.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the LWF-Brook90 hydrologic model — run_LWFB90","text":"options_b90 Named list model control options. Use set_optionsLWFB90 generate list default model control options. param_b90 Named list model input parameters. Use set_paramLWFB90 generate list default model parameters. climate Data.frame daily climatic data, function returns suitable data.frame. See details required variables. precip Data.frame columns 'dates' 'prec' supply precipitation data separately climate data. Can used provide sub-day resolution precipitation data LWFBrook90. day dates, 1 (daily resolution) 240 values precipitation can provided, number values per day defined options_b90$prec_interval. soil Data.frame containing hydraulic properties soil layers. See section 'Soil parameters' output_fun function list functions form f(x,...), x object regularly returned run_LWFB90. function evaluation, x contains model input selected output objects, irrespective rtrn_input rtrn_output. Can used  aggregate output --fly, especially useful function evaluated within large multi-run application, output might overload memory. (see run_multi_LWFB90 run_multisite_LWFB90). rtrn_input Logical: append param_b90, options_b90, daily plant properties (standprop_daily, derived parameters) result? rtrn_output Logical: return simulation results select via output? chk_input Logical wether check param_b90, options_b90, climate, precip, soil completeness consistency. run Logical: run LWF-Brook90 return model input objects? Useful inspect effects options parameters model input. Default TRUE. timelimit Integer set elapsed time limits (seconds) running LWF-Brook90. verbose Logical: print messages console? Default FALSE. ... Additional arguments passed output_fun /climate, latter function.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_LWFB90.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the LWF-Brook90 hydrologic model — run_LWFB90","text":"list containing selected model output (rtrn_output ==   TRUE), model input (rtrn_input == TRUE, except climate), return values output_fun specified.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_LWFB90.html","id":"climate-input-data","dir":"Reference","previous_headings":"","what":"Climate input data","title":"Run the LWF-Brook90 hydrologic model — run_LWFB90","text":"climate data.frame (function) must  contain (return) following variables columns named 'dates' (Date),  'tmax' (deg C), 'tmin' (deg C), 'tmean' (deg C), 'windspeed' (m/s), 'prec'  (mm) , 'vappres' (kPa), either 'globrad' ( MJ/(m²d) ) 'sunhours' (h).  using sunhours, please set options_b90$fornetrad =  'sunhours'.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_LWFB90.html","id":"soil-input-parameters","dir":"Reference","previous_headings":"","what":"Soil input parameters","title":"Run the LWF-Brook90 hydrologic model — run_LWFB90","text":"row soil represents one layer,  containing layers' boundaries soil hydraulic parameters. column  names upper lower layer boundaries 'upper' 'lower' (m,  negative downwards). using options_b90$imodel = 'MvG',  hydraulic parameters 'ths', 'thr', 'alpha' (1/m), 'npar', 'ksat' (mm/d)  'tort'.  options_b90$imodel = 'CH', parameters  'thsat', 'thetaf', 'psif' (kPa), 'bexp', 'kf' (mm/d), 'wetinf'.  parameterizations, volume fraction stones named 'gravel'.  soil argument provided, list items soil_nodes  soil_materials param_b90 used simulation.  set advance, see soil_to_param.","code":""},{"path":[]},{"path":[]},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_LWFB90.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the LWF-Brook90 hydrologic model — run_LWFB90","text":"","code":"# Set up lists containing model control options and model parameters: param_b90 <- set_paramLWFB90() options_b90 <- set_optionsLWFB90()  # Set start and end Dates for the simulation options_b90$startdate <- as.Date(\"2003-06-01\") options_b90$enddate <- as.Date(\"2003-06-30\")  # Derive soil hydraulic properties from soil physical properties # using pedotransfer functions soil <- cbind(slb1_soil, hydpar_wessolek_tab(slb1_soil$texture))  # Run LWF-Brook90 b90.result <- run_LWFB90(options_b90 = options_b90,                         param_b90 = param_b90,                         climate = slb1_meteo,                         soil = soil)  # use a function to be performed on the output: # aggregate soil water storage down to a specific layer agg_swat <- function(x, layer) {   out <- aggregate(swati~yr+doy,                    x$SWATDAY.ASC,                    FUN = sum,                    subset = nl <= layer)   out[order(out$yr, out$doy),]}  # run model without returning the selected output. b90.aggswat <- run_LWFB90(options_b90 = options_b90,                          param_b90 = param_b90,                          climate = slb1_meteo,                          soil = soil,                          output_fun = list(swat = agg_swat),                          rtrn_output = FALSE,                          layer = 10)  # passed to output_fun str(b90.aggswat$output_fun$swat) #>  NULL"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multi_LWFB90.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a multirun simulation using a set of variable input parameters. — run_multi_LWFB90","title":"Make a multirun simulation using a set of variable input parameters. — run_multi_LWFB90","text":"Wrapper function run_LWFB90 make multiple simulations parallel, varying input parameters.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multi_LWFB90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a multirun simulation using a set of variable input parameters. — run_multi_LWFB90","text":"","code":"run_multi_LWFB90(   paramvar,   param_b90,   paramvar_nms = names(paramvar),   cores = 2,   show_progress = TRUE,   ... )"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multi_LWFB90.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a multirun simulation using a set of variable input parameters. — run_multi_LWFB90","text":"paramvar Data.frame variable input parameters. row, simulation performed, elements param_b90 replaced respective column paramvar. parameter names (column names) paramvar must found param_b90. See section Parameter updating. param_b90 Named list parameters, parameters defined paramvar replaced. paramvar_nms Names parameters paramvar replaced param_b90. cores Number CPUs use parallel processing. Default 2. show_progress Logical: Show progress bar? Default TRUE. See also section Progress bar . ... Additional arguments passed run_LWFB90: provide least arguments defaults options_b90 climate).","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multi_LWFB90.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a multirun simulation using a set of variable input parameters. — run_multi_LWFB90","text":"named list results single runs returned run_LWFB90. Simulation processing errors passed .","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multi_LWFB90.html","id":"parameter-updating","dir":"Reference","previous_headings":"","what":"Parameter updating","title":"Make a multirun simulation using a set of variable input parameters. — run_multi_LWFB90","text":"transfer values row paramvar param_b90 single run simulation done matching names paramvar param_b90. order address data.frame vector elements param_b90 column name paramvar, respective column name set name index param_b90. replace, e.g., 2nd value ths soil_materials data.frame, respective column name paramvar called 'soil_materials.ths2'. order replace 3rd value maxlai vector param_b90, column named 'maxlai3'.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multi_LWFB90.html","id":"data-management","dir":"Reference","previous_headings":"","what":"Data management","title":"Make a multirun simulation using a set of variable input parameters. — run_multi_LWFB90","text":"returned list single run results can become large, many simulations performed selected output contains daily resolution data sets, especially daily layer-wise soil moisture data. overload memory, advised reduce returned simulation results minimum, carefully selecting output, make use option pass list functions run_LWFB90 via argument output_fun. functions perform directly output single run simulation, can used aggregating model output --fly, writing results file database. regular output run_LWFB90 can suppressed setting rtrn.output = FALSE, exclusively returning output functions.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multi_LWFB90.html","id":"progress-bar","dir":"Reference","previous_headings":"","what":"Progress bar","title":"Make a multirun simulation using a set of variable input parameters. — run_multi_LWFB90","text":"function provides progress bar via package progressr show_progress=TRUE. parallel computation wrapped progressr::with_progress() enable progress reporting distributed calculations. appearance progress bar (including audible notification) can customized user entire session using progressr::handlers() (see vignette('progressr-intro')).","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multi_LWFB90.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a multirun simulation using a set of variable input parameters. — run_multi_LWFB90","text":"","code":"# \\donttest{ data(\"slb1_meteo\") data(\"slb1_soil\")  # Set up lists containing model control options and model parameters: parms <- set_paramLWFB90() # choose the 'Coupmodel' shape option for the annual lai dynamic, # with fixed budburst and leaf fall dates: opts <- set_optionsLWFB90(startdate = as.Date(\"2003-06-01\"),                                  enddate = as.Date(\"2003-06-30\"),                                  lai_method = 'Coupmodel',                                  budburst_method = 'fixed',                                  leaffall_method = 'fixed')  # Derive soil hydraulic properties from soil physical properties using pedotransfer functions soil <- cbind(slb1_soil, hydpar_wessolek_tab(slb1_soil$texture))  #set up data.frame with variable parameters n <- 10 set.seed(2021) vary_parms <- data.frame(shp_optdoy = runif(n,180,240),                          shp_budburst = runif(n, 0.1,1),                          winlaifrac = runif(n, 0,0.5),                          budburstdoy = runif(n,100,150),                          soil_materials.ths3 = runif(n, 0.3,0.5), # ths of material 3                          maxlai = runif(n,2,7))  # add the soil as soil_nodes and soil materials to param_b90, so ths3 can be looked up parms[c(\"soil_nodes\", \"soil_materials\")] <- soil_to_param(soil)  # Make a Multirun-Simulation b90.multi <- run_multi_LWFB90(paramvar = vary_parms,                         param_b90 = parms,                         options_b90 = opts,                         climate = slb1_meteo) names(b90.multi) #>  [1] \"RunNo.1\"  \"RunNo.2\"  \"RunNo.3\"  \"RunNo.4\"  \"RunNo.5\"  \"RunNo.6\"  #>  [7] \"RunNo.7\"  \"RunNo.8\"  \"RunNo.9\"  \"RunNo.10\"  # extract results evapday <- data.table::rbindlist(   lapply(b90.multi, FUN = function(x) { x$output[,c(\"yr\", \"doy\", \"evap\")] }),   idcol = \"srun\")  evapday$dates <- as.Date(paste(evapday$yr, evapday$doy),\"%Y %j\")  srun_nms <- unique(evapday$srun)  with(evapday[evapday$srun == srun_nms[1], ],      plot(dates, cumsum(evap), type = \"n\",           ylim = c(0,100)) ) for (i in 1:length(b90.multi)){   with(evapday[evapday$srun == srun_nms[i], ],        lines(dates, cumsum(evap))) }   # }"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multisite_LWFB90.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a multi-site simulation using lists of climate, soil, and\nparameter input objects. — run_multisite_LWFB90","title":"Make a multi-site simulation using lists of climate, soil, and\nparameter input objects. — run_multisite_LWFB90","text":"Wrapper function run_LWFB90 make multiple parallel simulations one several parameter sets, series sites individual climate soil, individual parameter sets climate/soil combinations.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multisite_LWFB90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a multi-site simulation using lists of climate, soil, and\nparameter input objects. — run_multisite_LWFB90","text":"","code":"run_multisite_LWFB90(   options_b90,   param_b90,   soil = NULL,   climate,   climate_args = NULL,   all_combinations = FALSE,   cores = 2,   show_progress = TRUE,   ... )"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multisite_LWFB90.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a multi-site simulation using lists of climate, soil, and\nparameter input objects. — run_multisite_LWFB90","text":"options_b90 Named list model control options used simulations param_b90 Named list parameters used simulations, list multiple parameter sets. soil Data.frame soil properties used simulations, list data.frames different soil profiles. climate Data.frame climate data, list climate data.frames. Alternatively, function can supplied returns data.frame. Arguments function can passed via climate_args. climate_args List named lists arguments passed climate, function. all_combinations Logical: Set run possible combinations individual param_b90, climate soil objects? Default FALSE, running one object list param_b90 objects series climate/soil combinations. cores Number cores use parallel processing. show_progress Logical: Show progress bar? Default TRUE. See also section Progress bar . ... arguments passed run_LWFB90.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multisite_LWFB90.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a multi-site simulation using lists of climate, soil, and\nparameter input objects. — run_multisite_LWFB90","text":"named list results single runs returned run_LWFB90. Simulation processing errors passed .   names returned list entries concatenated names   input list entries following form: <climate> <soil> <param_b90>. climate function, names <climate> taken   names climate_args.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multisite_LWFB90.html","id":"data-management","dir":"Reference","previous_headings":"","what":"Data management","title":"Make a multi-site simulation using lists of climate, soil, and\nparameter input objects. — run_multisite_LWFB90","text":"returned list single run results can become large, many simulations performed selected output contains daily resolution data sets, especially daily layer-wise soil moisture data. overload memory, advised reduce returned simulation results minimum, carefully selecting output, make use option pass list functions run_LWFB90 via argument output_fun. functions perform directly output single run simulation, can used aggregating model output --fly, writing results file database. regular output run_LWFB90 can suppressed setting rtrn.output = FALSE, exclusively returning output functions. provide full flexibility, names current soil, param_b90, climate automatically passed additional arguments (soil_nm, param_nm,clim_nm) run_LWFB90 way become available functions passed via output_fun. order overload memory climate input data, advised provide function instead list climate data.frames, specify arguments individual sites climate_args, case many sites individual climates simulated.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multisite_LWFB90.html","id":"progress-bar","dir":"Reference","previous_headings":"","what":"Progress bar","title":"Make a multi-site simulation using lists of climate, soil, and\nparameter input objects. — run_multisite_LWFB90","text":"function provides progress bar via package progressr show_progress=TRUE. parallel computation wrapped progressr::with_progress() enable progress reporting distributed calculations. appearance progress bar (including audible notification) can customized user entire session using progressr::handlers() (see vignette('progressr-intro')).","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/run_multisite_LWFB90.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a multi-site simulation using lists of climate, soil, and\nparameter input objects. — run_multisite_LWFB90","text":"","code":"# \\donttest{ data(\"slb1_meteo\") data(\"slb1_soil\")  opts <- set_optionsLWFB90(budburst_method = \"Menzel\", enddate = as.Date(\"2002-12-31\"))  # define parameter sets param_l <- list(spruce = set_paramLWFB90(maxlai = 5,                                          budburst_species = \"Picea abies (frueh)\",                                          winlaifrac = 0.8),                 beech = set_paramLWFB90(maxlai = 6,                                         budburst_species = \"Fagus sylvatica\",                                         winlaifrac = 0))  soil <- cbind(slb1_soil, hydpar_wessolek_tab(slb1_soil$texture))  # define list of soil objects soils <- list(soil1 = soil, soil2 = soil)  # define list of climate objects climates <- list(clim1 = slb1_meteo, clim2 = slb1_meteo)  # run two parameter sets on a series of climate and soil-objects res <- run_multisite_LWFB90(param_b90 = param_l,                       options_b90 = opts,                       soil = soils,                       climate = climates) names(res) #> [1] \"clim1 soil1 spruce\" \"clim2 soil2 beech\"   # set up and run individual parameter sets for individual locations  # set up location parameters loc_parm <- data.frame(loc_id = names(climates),                        coords_y = c(48.0, 54.0),                        eslope = c(30,0),                        aspect = c(180,0))  # create input list of multiple param_b90 list objects param_l <- lapply(names(climates), function(x, loc_parms) {   parms <- set_paramLWFB90()   parms[match(names(loc_parm),names(parms), nomatch = 0)] <-     loc_parm[loc_parm$loc_id == x, which(names(loc_parm) %in% names(parms))]   parms }, loc_parm = loc_parm)  names(param_l) <- c(\"locpar1\", \"locpar2\")  res <- run_multisite_LWFB90(param_b90 = param_l,                       options_b90 = opts,                       soil = soils,                       climate = climates) names(res) #> [1] \"clim1 soil1 locpar1\" \"clim2 soil2 locpar2\" # }"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_optionsLWFB90.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of model control options — set_optionsLWFB90","title":"Create a list of model control options — set_optionsLWFB90","text":"Create list model control options","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_optionsLWFB90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of model control options — set_optionsLWFB90","text":"","code":"set_optionsLWFB90(...)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_optionsLWFB90.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of model control options — set_optionsLWFB90","text":"... Named values included return value.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_optionsLWFB90.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of model control options — set_optionsLWFB90","text":"list model control options use options_b90-argument run_LWFB90.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_optionsLWFB90.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a list of model control options — set_optionsLWFB90","text":"startdate start date simulation. enddate end date simulation. fornetrad use global solar radiation (='globrad') sunshine   duration hours (='sunhours') net radiation calculation? prec_interval number precipitation intervals per day (default   1). prec_interval > 1, precip-argument   provided run_LWFB90 correct_prec correct precipitation data wind evaporation losses   using correct_prec? budburst_method name method   budburst calculation. 'constant' 'fixed', budburst day   year parameters used. methods calculate budburst day   year dynamically airtemperatures, method name passed   start.method-argument  vegperiod. leaffall_method name method leaffall calculation.   'constant' 'fixed', beginning leaffall (day year)   parameters used. methods calculate budburst day year   dynamically temperatures, method name passed   end.method-argument vegperiod. standprop_input name input longterm (interannual) plant   development. standprop_input = 'parameters': yearly values stand   properties height, sai, densef, lai taken individual parameters,   standprop_input = 'table':  values standprop_table   provided parameters used. standprop_interp interpolation   method aboveground stand properties. 'linear'   'constant', see approx.method-argument   approx_standprop. use_growthperiod   yearly changes stand properties (growth) take place   growth period? TRUE, linear interpolation height, sai, densef   age made budburst leaffall. winter values   constant. Beginning end growth period taken parameters   budburstdoy leaffalldoy. See use_growthperiod-argument   approx_standprop. lai_method name method   constructing seasonal course leaf area index development parameters.   Passed method-argument make_seasLAI. imodel name retention & conductivity model: \"CH\"   Clapp/Hornberger, \"MvG\" Mualem/van Genuchten root_method method   name root length density depth distribution function.   names accepted make_rootden allowed. Additionally,   'soilvar' can used root length density depth distribution   specified column 'rootden' soil-data.frame","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_optionsLWFB90.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of model control options — set_optionsLWFB90","text":"","code":"# Default options options_b90 <- set_optionsLWFB90() # Include specific options options_b90_dynamic_phenology <- set_optionsLWFB90(budburst_method = 'Menzel', leaffall_method ='vonWilpert')"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_outputLWFB90.html","id":null,"dir":"Reference","previous_headings":"","what":"Select output for LWF-Brook90 — set_outputLWFB90","title":"Select output for LWF-Brook90 — set_outputLWFB90","text":"Returns [7,5] matrix default selection LWF-Brook90 output data sets use 'output'-argument run_LWFB90.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_outputLWFB90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select output for LWF-Brook90 — set_outputLWFB90","text":"","code":"set_outputLWFB90(output = NULL, edit = FALSE)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_outputLWFB90.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select output for LWF-Brook90 — set_outputLWFB90","text":"output optional [7,5]-matrix, opened R's data-editor edit = TRUE. matrix passed, default selection output values returned opened R's data-editor. edit open R's data-editor ?","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_outputLWFB90.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select output for LWF-Brook90 — set_outputLWFB90","text":"[7,5]-matrix containing 0 1 use output-argument run_LWFB90","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_outputLWFB90.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select output for LWF-Brook90 — set_outputLWFB90","text":"","code":"# create matrix with default selection output <- set_outputLWFB90() output #>      Ann Mon Day Pre ITR #> Budg   0   0   0   0   0 #> Flow   0   0   0   0   0 #> Evap   1   1   1   0   0 #> Abov   0   0   0   0   0 #> Belo   0   0   0   0   0 #> Swat   0   0   1   0   0 #> Misc   0   0   0   0   0  # modify output[,] <- 0L output[,3] <- 1L output[\"Evap\", c(\"Ann\",\"Mon\")] <- 1L output #>      Ann Mon Day Pre ITR #> Budg   0   0   1   0   0 #> Flow   0   0   1   0   0 #> Evap   1   1   1   0   0 #> Abov   0   0   1   0   0 #> Belo   0   0   1   0   0 #> Swat   0   0   1   0   0 #> Misc   0   0   1   0   0"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_paramLWFB90.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the list of model parameters — set_paramLWFB90","title":"Create the list of model parameters — set_paramLWFB90","text":"Create list model parameters","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_paramLWFB90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the list of model parameters — set_paramLWFB90","text":"","code":"set_paramLWFB90(...)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_paramLWFB90.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the list of model parameters — set_paramLWFB90","text":"... Named arguments included return value.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_paramLWFB90.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the list of model parameters — set_paramLWFB90","text":"list model parameters use param_b90-argument run_LWFB90.","code":""},{"path":[]},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/set_paramLWFB90.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the list of model parameters — set_paramLWFB90","text":"","code":"# Default parameter parms <- set_paramLWFB90() # Include specific parameters parms_maxlai <- set_paramLWFB90(maxlai = c(4,6,5), height =20)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_meteo.html","id":null,"dir":"Reference","previous_headings":"","what":"Meteorological Data from the Solling Beech and Spruce experimental site — slb1_meteo","title":"Meteorological Data from the Solling Beech and Spruce experimental site — slb1_meteo","text":"dataset containing daily weather variables period 1960-2013","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_meteo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meteorological Data from the Solling Beech and Spruce experimental site — slb1_meteo","text":"","code":"slb1_meteo"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_meteo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Meteorological Data from the Solling Beech and Spruce experimental site — slb1_meteo","text":"data.frame 19724 rows 9 variables dates date tmin daily minimum temperature, deg C tmax daily maximum temperature, deg C tmean daily mean temperature, deg C prec daily sum precipitation, mm relhum relative Humidity, % globrad daily sum global radiation, MJ/m² windspeed daily mean wind speed measured 10 m ground, m/s vappres daily vapour pressure, kPa","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_prec2013_hh.html","id":null,"dir":"Reference","previous_headings":"","what":"Hourly precipitation data from Solling Beech experimental site 'SLB1' for year 2013 — slb1_prec2013_hh","title":"Hourly precipitation data from Solling Beech experimental site 'SLB1' for year 2013 — slb1_prec2013_hh","text":"Hourly precipitation data Solling Beech experimental site 'SLB1' year 2013","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_prec2013_hh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hourly precipitation data from Solling Beech experimental site 'SLB1' for year 2013 — slb1_prec2013_hh","text":"","code":"slb1_prec2013_hh"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_prec2013_hh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hourly precipitation data from Solling Beech experimental site 'SLB1' for year 2013 — slb1_prec2013_hh","text":"data.frame 8760 rows 2 variables dates date prec hourly sum precipitation, mm","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_soil.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil profile data from the Solling Beech experimental site 'SLB1' — slb1_soil","title":"Soil profile data from the Solling Beech experimental site 'SLB1' — slb1_soil","text":"dataset containing soil horizons' physical properties","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_soil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil profile data from the Solling Beech experimental site 'SLB1' — slb1_soil","text":"","code":"slb1_soil"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_soil.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil profile data from the Solling Beech experimental site 'SLB1' — slb1_soil","text":"data.frame 21 rows 10 variables horizon horizon symbol upper upper layer boundary, m lower lower layer boundary, m texture soil texture according German soil texture classification system bd bulk density fine earth, g/cm³ gravel fraction coarse material sand sand content, mass-% silt silt content, mass-% clay clay content, mass-% c_org organic carbon content, mass-%","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_standprop.html","id":null,"dir":"Reference","previous_headings":"","what":"Annual stand properties of the Solling Beech experimental site 'SLB1' — slb1_standprop","title":"Annual stand properties of the Solling Beech experimental site 'SLB1' — slb1_standprop","text":"dataset containing forests's stand properties","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_standprop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annual stand properties of the Solling Beech experimental site 'SLB1' — slb1_standprop","text":"","code":"slb1_standprop"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/slb1_standprop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Annual stand properties of the Solling Beech experimental site 'SLB1' — slb1_standprop","text":"data.frame 49 rows 7 variables year Year observation species Tree species age age main stand height average height trees, m maxlai maximum leaf area index, m²/m² sai stem area index, m²/m² densef stand density","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/soil_to_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Split up soil into materials and soil nodes. — soil_to_param","title":"Split up soil into materials and soil nodes. — soil_to_param","text":"Split soil materials soil nodes.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/soil_to_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split up soil into materials and soil nodes. — soil_to_param","text":"","code":"soil_to_param(soil, imodel = \"MvG\")"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/soil_to_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split up soil into materials and soil nodes. — soil_to_param","text":"soil Data.frame soil layer boundaries ('upper', 'lower') hydraulic parameters. imodel = 'MvG', columns soil named 'ths', 'thr', 'alpha', 'npar', 'ksat', 'tort', 'gravel'. imodel = 'CH', columns named thsat , 'thetaf','psif', 'bexp','kf', 'wetinf', 'gravel'. imodel Name hydraulic model ('MvG' 'CH')","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/soil_to_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split up soil into materials and soil nodes. — soil_to_param","text":"list data.frames 'soil_nodes' 'soil_materials'","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/soil_to_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split up soil into materials and soil nodes. — soil_to_param","text":"","code":"data(slb1_soil) soil <- slb1_soil soil <- cbind(soil, hydpar_wessolek_tab(soil$texture)) str(soil) #> 'data.frame':\t21 obs. of  17 variables: #>  $ horizon: chr  \"I Ah\" \"I Aeh\" \"I Aeh\" \"I Aeh\" ... #>  $ upper  : num  0 -0.01 -0.03 -0.05 -0.08 -0.12 -0.16 -0.22 -0.28 -0.36 ... #>  $ lower  : num  -0.01 -0.03 -0.05 -0.08 -0.12 -0.16 -0.22 -0.28 -0.36 -0.44 ... #>  $ texture: chr  \"Ut3\" \"Ut3\" \"Ut3\" \"Ut3\" ... #>  $ bd     : num  1 1.1 1.1 1.1 1.4 1.4 1.4 1.4 1.4 1.4 ... #>  $ gravel : num  0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 ... #>  $ sand   : num  11.2 11.2 11.2 11.2 11.2 11.2 11.2 11.2 11.2 11.2 ... #>  $ silt   : num  74.6 74.6 74.6 74.6 74.6 74.6 74.6 74.6 74.6 74.6 ... #>  $ clay   : num  14.2 14.2 14.2 14.2 14.2 14.2 14.2 14.2 14.2 14.2 ... #>  $ c_org  : num  9.55 6.62 6.62 6.62 1.25 1.25 1.25 1.25 1.25 1.25 ... #>  $ ths    : num  0.403 0.403 0.403 0.403 0.403 ... #>  $ thr    : num  0.0053 0.0053 0.0053 0.0053 0.0053 0.0053 0.0053 0.0053 0.0053 0.0053 ... #>  $ alpha  : num  1.68 1.68 1.68 1.68 1.68 ... #>  $ npar   : num  1.21 1.21 1.21 1.21 1.21 ... #>  $ mpar   : num  0.171 0.171 0.171 0.171 0.171 ... #>  $ ksat   : num  277 277 277 277 277 ... #>  $ tort   : num  -1.2 -1.2 -1.2 -1.2 -1.2 ...  soil_layers_materials <- soil_to_param(soil) soil_layers_materials #> $soil_nodes #>     layer upper lower thick midpoint mat #>  1:     1  0.00 -0.01    10   -0.005   1 #>  2:     2 -0.01 -0.03    20   -0.020   1 #>  3:     3 -0.03 -0.05    20   -0.040   1 #>  4:     4 -0.05 -0.08    30   -0.065   1 #>  5:     5 -0.08 -0.12    40   -0.100   1 #>  6:     6 -0.12 -0.16    40   -0.140   1 #>  7:     7 -0.16 -0.22    60   -0.190   1 #>  8:     8 -0.22 -0.28    60   -0.250   1 #>  9:     9 -0.28 -0.36    80   -0.320   1 #> 10:    10 -0.36 -0.44    80   -0.400   1 #> 11:    11 -0.44 -0.52    80   -0.480   1 #> 12:    12 -0.52 -0.60    80   -0.560   1 #> 13:    13 -0.60 -0.70   100   -0.650   2 #> 14:    14 -0.70 -0.85   150   -0.775   2 #> 15:    15 -0.85 -1.00   150   -0.925   3 #> 16:    16 -1.00 -1.20   200   -1.100   3 #> 17:    17 -1.20 -1.40   200   -1.300   3 #> 18:    18 -1.40 -1.50   100   -1.450   4 #> 19:    19 -1.50 -1.70   200   -1.600   5 #> 20:    20 -1.70 -1.90   200   -1.800   5 #> 21:    21 -1.90 -2.10   200   -2.000   5 #>     layer upper lower thick midpoint mat #>  #> $soil_materials #>    mat    ths     thr alpha    npar   ksat   tort gravel #> 1:   1 0.4031 0.00530 1.679 1.20668 277.08 -1.198   0.04 #> 2:   2 0.4003 0.00000 2.513 1.19338 404.09 -4.032   0.18 #> 3:   3 0.4003 0.00000 2.513 1.19338 404.09 -4.032   0.38 #> 4:   4 0.4380 0.14920 7.013 1.24572 625.31 -3.180   0.65 #> 5:   5 0.4091 0.07284 6.835 1.20501 982.00 -3.226   0.90 #>"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/standprop_yearly_to_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer standproperties height, maxlai, sai, densef, age to parameter list obeject — standprop_yearly_to_param","title":"Transfer standproperties height, maxlai, sai, densef, age to parameter list obeject — standprop_yearly_to_param","text":"Takes data.frame yearly stand properties, trims/extends columns height, maxlai, sai, densef, age years out_yrs, updates provided parameter list.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/standprop_yearly_to_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer standproperties height, maxlai, sai, densef, age to parameter list obeject — standprop_yearly_to_param","text":"","code":"standprop_yearly_to_param(standprop_yearly, param_b90, out_yrs)"},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/standprop_yearly_to_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer standproperties height, maxlai, sai, densef, age to parameter list obeject — standprop_yearly_to_param","text":"standprop_yearly data.frame data.table columns 'year', 'height', 'maxlai', 'sai', 'densef', 'age'. param_b90 list object update. out_yrs Vector years parameters updated.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/standprop_yearly_to_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer standproperties height, maxlai, sai, densef, age to parameter list obeject — standprop_yearly_to_param","text":"param_b90 list-object updated items maxlai, height, height_ini, sai, sai_ini, densef, densef_ini, age, age_ini.","code":""},{"path":"https://pschmidtwalter.github.io/LWFBrook90R/reference/standprop_yearly_to_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transfer standproperties height, maxlai, sai, densef, age to parameter list obeject — standprop_yearly_to_param","text":"","code":"param_b90 <- set_paramLWFB90() dat <- slb1_standprop  years <- 2002:2005 param.new <- standprop_yearly_to_param(dat,                                        param_b90,                                        years)  identical(param.new$maxlai, dat$maxlai[dat$year %in% years]) #> [1] TRUE identical(param.new$height, dat$height[dat$year %in% years]) #> [1] TRUE"}]
